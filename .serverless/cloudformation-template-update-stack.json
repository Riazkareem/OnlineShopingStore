{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "HomeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-Home"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-Register"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-Login"
      }
    },
    "VerifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-Verify"
      }
    },
    "AccountDashrecoveryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-account-recovery"
      }
    },
    "ResetPasswordLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-ResetPassword"
      }
    },
    "LogoutLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-Logout"
      }
    },
    "GetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getAllUsers"
      }
    },
    "GetUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getUsers"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getUser"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-updateUser"
      }
    },
    "DeleteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteUser"
      }
    },
    "S3FileUploaderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-s3FileUploader"
      }
    },
    "CsvUploaderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-csvUploader"
      }
    },
    "CsvToDynamodbLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-csvToDynamodb"
      }
    },
    "UploadCSVLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-uploadCSV"
      }
    },
    "ListcsvLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-listcsv"
      }
    },
    "DeletecsvLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-deletecsv"
      }
    },
    "SearchcsvLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-searchcsv"
      }
    },
    "AddProductsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-addProducts"
      }
    },
    "GetAllProductsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getAllProducts"
      }
    },
    "GetProductsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getProducts"
      }
    },
    "GetProductLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getProduct"
      }
    },
    "UpdateProductLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-updateProduct"
      }
    },
    "DeleteProductLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteProduct"
      }
    },
    "SearchProductLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-searchProduct"
      }
    },
    "AddCategoriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-addCategories"
      }
    },
    "AllCategoriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-allCategories"
      }
    },
    "GetCategoriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getCategories"
      }
    },
    "GetCategoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getCategory"
      }
    },
    "UpdateCategoriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-updateCategories"
      }
    },
    "DeleteCategoriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteCategories"
      }
    },
    "AddTagsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-addTags"
      }
    },
    "AllTagsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-allTags"
      }
    },
    "GetTagsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getTags"
      }
    },
    "GetTagLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getTag"
      }
    },
    "UpdateTagsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-updateTags"
      }
    },
    "DeleteTagLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteTag"
      }
    },
    "AddOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-addOrder"
      }
    },
    "AllOrdersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-allOrders"
      }
    },
    "GetOrdersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getOrders"
      }
    },
    "GetSingleOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-getSingleOrder"
      }
    },
    "UpdateOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-updateOrder"
      }
    },
    "DeleteOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteOrder"
      }
    },
    "PaymentMethodLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/OnlineStore-dev-paymentMethod"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "OnlineStore",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OnlineStore-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OnlineStore-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "s3:PutObject*",
                    "s3:GetObject*",
                    "s3:ListBucket*",
                    "s3:DeleteObject*",
                    "ses:*"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreUser",
                    "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreProducts",
                    "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreCategories",
                    "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreTags",
                    "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreOrder",
                    "arn:aws:s3:::onlinestoreimages/*",
                    "arn:aws:s3:::onlinestorecsv/*",
                    "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreUser",
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "OnlineStore",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HomeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-Home",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HomeLogGroup"
      ]
    },
    "RegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-Register",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-Login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "VerifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-Verify",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyLogGroup"
      ]
    },
    "AccountDashrecoveryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-account-recovery",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AccountDashrecoveryLogGroup"
      ]
    },
    "ResetPasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-ResetPassword",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ResetPasswordLogGroup"
      ]
    },
    "LogoutLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-Logout",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogoutLogGroup"
      ]
    },
    "GetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/users.getAllUsers",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersLogGroup"
      ]
    },
    "GetUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/users.getUsers",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUsersLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/users.getUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/users.updateUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "DeleteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Users/users.deleteUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-deleteUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteUserLogGroup"
      ]
    },
    "S3FileUploaderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/products.uploadfile",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-s3FileUploader",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "S3FileUploaderLogGroup"
      ]
    },
    "CsvUploaderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/uploadcsv.uploadcsv",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-csvUploader",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CsvUploaderLogGroup"
      ]
    },
    "CsvToDynamodbLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/csvtodynamodb.csvtodynamodb",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-csvToDynamodb",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CsvToDynamodbLogGroup"
      ]
    },
    "UploadCSVLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Buckets/uploadcsv.uploadcsv",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-uploadCSV",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadCSVLogGroup"
      ]
    },
    "ListcsvLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Buckets/listcsv.listcsv",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-listcsv",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListcsvLogGroup"
      ]
    },
    "DeletecsvLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Buckets/deletecsv.deletecsv",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-deletecsv",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeletecsvLogGroup"
      ]
    },
    "SearchcsvLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Buckets/searchcsv.searchcsv",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-searchcsv",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SearchcsvLogGroup"
      ]
    },
    "AddProductsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.addProducts",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-addProducts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddProductsLogGroup"
      ]
    },
    "GetAllProductsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.getAllProducts",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getAllProducts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllProductsLogGroup"
      ]
    },
    "GetProductsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.getProducts",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getProducts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetProductsLogGroup"
      ]
    },
    "GetProductLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.getProduct",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getProduct",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetProductLogGroup"
      ]
    },
    "UpdateProductLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.updateProduct",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-updateProduct",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateProductLogGroup"
      ]
    },
    "DeleteProductLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.deleteProduct",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-deleteProduct",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteProductLogGroup"
      ]
    },
    "SearchProductLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Products/addProducts.searchProduct",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-searchProduct",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SearchProductLogGroup"
      ]
    },
    "AddCategoriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Categories/categories.addCategories",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-addCategories",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddCategoriesLogGroup"
      ]
    },
    "AllCategoriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Categories/categories.allCategories",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-allCategories",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AllCategoriesLogGroup"
      ]
    },
    "GetCategoriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Categories/categories.getCategories",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getCategories",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCategoriesLogGroup"
      ]
    },
    "GetCategoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Categories/categories.getCategory",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getCategory",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCategoryLogGroup"
      ]
    },
    "UpdateCategoriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Categories/categories.updateCategories",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-updateCategories",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCategoriesLogGroup"
      ]
    },
    "DeleteCategoriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Categories/categories.deleteCategories",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-deleteCategories",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCategoriesLogGroup"
      ]
    },
    "AddTagsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Tags/tags.addTags",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-addTags",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddTagsLogGroup"
      ]
    },
    "AllTagsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Tags/tags.allTags",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-allTags",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AllTagsLogGroup"
      ]
    },
    "GetTagsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Tags/tags.getTags",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getTags",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTagsLogGroup"
      ]
    },
    "GetTagLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Tags/tags.getTag",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getTag",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTagLogGroup"
      ]
    },
    "UpdateTagsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Tags/tags.updateTags",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-updateTags",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTagsLogGroup"
      ]
    },
    "DeleteTagLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Tags/tags.deleteTag",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-deleteTag",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteTagLogGroup"
      ]
    },
    "AddOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Order/order.addOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-addOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddOrderLogGroup"
      ]
    },
    "AllOrdersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Order/order.allOrders",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-allOrders",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AllOrdersLogGroup"
      ]
    },
    "GetOrdersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Order/order.getOrders",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getOrders",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetOrdersLogGroup"
      ]
    },
    "GetSingleOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Order/order.getSingleOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-getSingleOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetSingleOrderLogGroup"
      ]
    },
    "UpdateOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Order/order.updateOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-updateOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateOrderLogGroup"
      ]
    },
    "DeleteOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "Order/order.deleteOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-deleteOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteOrderLogGroup"
      ]
    },
    "PaymentMethodLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/OnlineStore/dev/1670242980393-2022-12-05T12:23:00.393Z/OnlineStore.zip"
        },
        "Handler": "paymentMethod/index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "OnlineStore-dev-paymentMethod",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "OnlineStoreUser",
            "PRODUCTS_TABLE": "OnlineStoreProducts",
            "CATEGORIES_TABLE": "OnlineStoreCategories",
            "TAGS_TABLE": "OnlineStoreTags",
            "ORDER_TABLE": "OnlineStoreOrder",
            "IMAGES_BUCKET": "onlinestoreimages",
            "ONLINESTORE_CSV": "onlinestorecsv",
            "JWT_SECRET": "OnlineStoreUser"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PaymentMethodLogGroup"
      ]
    },
    "HomeLambdaVersion6znszCzIZmBwPyygyOJIC0vGvB65QdKHSeUnu3pZ8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HomeLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "RegisterLambdaVersionj0cmLp0vby8uGELUbHGFzUnFXrjScy1gpTcdaGIqSg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "LoginLambdaVersionK42VIdiuHlrVMPhh72BwRB4MERK3NypomM5q9fyqMOY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "VerifyLambdaVersiontp7mm0JyPvyVASUwcYyCzZ1QaNTxXKnBGg737U2s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AccountDashrecoveryLambdaVersioniuLjnTaQRswqSowShK1tlc1Qxf7qWF3ujQ13sJBg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AccountDashrecoveryLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "ResetPasswordLambdaVersionJd1VxQ10N3J6xXU8z3aPC0MNJX4CqPvsxbyz4gOlm8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ResetPasswordLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "LogoutLambdaVersionzVyjcUEWCISJjuWY8CiJuAupHM8VEm5ebSiNVldw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LogoutLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetAllUsersLambdaVersionVAsmlOQLnchvk9LMYzbEua4NfABrCG8BnqQlMOhhDzk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetUsersLambdaVersionKq3LktHhhALj196LlKNAQM7d4sfXdCZXtwemNRc1Nk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetUserLambdaVersionifjZLwsG3vMCGzhADf98XxVMkHpBN4GT0HDYQPRmlg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "UpdateUserLambdaVersionNmYtd0nr8wtx1SM8UR01CYp4LsY6g1Nylz8OlDPeI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "DeleteUserLambdaVersion1ybYiqtZTH3WSv5qqbgXoiAW3dOv1jlbRyelQzsEbpo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUserLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "S3FileUploaderLambdaVersionG7hB1IodidGBFRIVqdO9L2bU88BbLWkRE1mWj2dlck": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "S3FileUploaderLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "CsvUploaderLambdaVersionEXdj2HBGjKe2z9hr7rEeL1usqZAMYZuOVlpsY1ab8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CsvUploaderLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "CsvToDynamodbLambdaVersioncN4rC74n3yONtyhK5gNhXQvJJf0xdLbHEb39AtUeos": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CsvToDynamodbLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "UploadCSVLambdaVersionJr5RvUeIDmqbHXuHBzkJvG03cdjshoaZCJw8FwjVJsM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadCSVLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "ListcsvLambdaVersionl7gsziiSQsHHN158zdd6VuUTN4QWlPWk6jpGEJ4yo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListcsvLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "DeletecsvLambdaVersionD8pCI1jymRQ7mQydZxKYiicO0lZ3wXDehdgpCzlwFEo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeletecsvLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "SearchcsvLambdaVersionbJZeIoOWVX04low2p6LV8PQYrE1dzRGOeC7jZAoE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SearchcsvLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AddProductsLambdaVersionjSUU5slenN7Hhb0xoAHJ32DgmfCTDIw6e5Bqs34LgA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddProductsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetAllProductsLambdaVersionNHdQaxDvwgCIDdCLFrLE02KK0iJlnADYSzlw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllProductsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetProductsLambdaVersionBnZiylfghrX0Me6kMuKyFzVhBmuQyXLpSQgTOB41no": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetProductsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetProductLambdaVersion7escifiwxJD4ql3BLj5qNFaQzlmMLqXEvoJRhkFxo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetProductLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "UpdateProductLambdaVersion3uRwDWlGWak7pnMRlBHA8V6NeqtsETdQE3I6MrYWbQc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateProductLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "DeleteProductLambdaVersionT35X8CCYFnEOHCJ4patMxrCtJe1ZpTZ1fdzQZfT8iI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteProductLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "SearchProductLambdaVersionsGQlrZA2DaQa57YxZVZIztOVaabMpJfTgCYzcWsPi54": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SearchProductLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AddCategoriesLambdaVersionj2a4OISeupzDgCb8WAwi4TRszdW6hX1e6RpY2AKcmk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddCategoriesLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AllCategoriesLambdaVersionyZ3OJp3cA4V2FTHyTyixpQ9APY8e7BJFZKmqK9BDt8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AllCategoriesLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetCategoriesLambdaVersioncRvZTyiwNCSRrVJ74sAaDh152tpcbpH8Sz5uLq35M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCategoriesLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetCategoryLambdaVersion4uTop9ipo0zn0dNezYSCvwoVSmb0bhCcmvndALG44E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCategoryLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "UpdateCategoriesLambdaVersionNPwYbSNiaV9BsFy5eRvDw14ItayeLfwbHtJQfa7tY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCategoriesLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "DeleteCategoriesLambdaVersionJ7RpYgTeohGwU4XkJ5vHxvEpFpbaKHTE0oOAGmxrR4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCategoriesLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AddTagsLambdaVersionb98f1epaSptmKp7sl7gViranrYjGOtjk5nvXNgmwSXU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddTagsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AllTagsLambdaVersionwki7Vxjfv86KovMD8YzweyMh0eW0wGt0T0YOJNNg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AllTagsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetTagsLambdaVersionO8NGQwtu4kdHmnIRJH6TaQKf4Nq06AeIlwvf3Brg6k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTagsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetTagLambdaVersionaax8S5tbeQb1GwZZiZwuGpgeDLqKc4AvvdS4TdXzo8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTagLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "UpdateTagsLambdaVersionigW4u31edCr9glksgaVtEaRDih7FxSTe6PlTv4X4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTagsLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "DeleteTagLambdaVersionRgkCarwgV4jG0m3LebkCiWxiPG91I4B4ncDzVVW03M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteTagLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AddOrderLambdaVersionO1QlgvheM1fw8g0vixUyQAgYBEsmbAm2q5gWk8VY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddOrderLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "AllOrdersLambdaVersionpyGzalPPIFKDjyeoWSzwT7dMUuOFbWFzevvu3QXe81Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AllOrdersLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetOrdersLambdaVersionxdFvap0UYwD43dJdf7lsWRzPzpr5owo54MD1oJg2Evo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetOrdersLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "GetSingleOrderLambdaVersion28c7dBc7B0Ski0VHhX66cFlw8nyA81S6RhH9xWsc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSingleOrderLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "UpdateOrderLambdaVersionNZi5qJtHgfSnpVnEz1mCyTcbbpQDX4gDpHJfZA4dNw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateOrderLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "DeleteOrderLambdaVersion5RPz8ieFFkz28uT8mTkyAbx6hkvr4SZGKblLxpKOuo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteOrderLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "PaymentMethodLambdaVersionOhxZGGF7luUCy71x28xeB0pUpqD6awPjVFPq72R9tI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PaymentMethodLambdaFunction"
        },
        "CodeSha256": "jJVK25DhsF8xys3eudNiNyBY+FUvk0rC01XUxbEybGg="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-OnlineStore",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceHome": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "home",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRegister": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "register",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVerify": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "verify",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAccountDashrecovery": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "account-recovery",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceResetpassword": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "resetpassword",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLogout": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "logout",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersNumberVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "{number}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getuser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetuserEmailVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGetuser"
        },
        "PathPart": "{email}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdateuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "updateuser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeleteuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "deleteuser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeleteuserEmailVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDeleteuser"
        },
        "PathPart": "{email}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "file",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadcsv": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "uploadcsv",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCsvtodynamodb": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "csvtodynamodb",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceListcsv": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "listcsv",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletecsv": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "deletecsv",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletecsvFilenameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDeletecsv"
        },
        "PathPart": "{filename}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSearchcsv": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "searchcsv",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSearchcsvNameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSearchcsv"
        },
        "PathPart": "{name}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAddproducts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "addProducts",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetallproducts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getAllProducts",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProducts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "products",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProductsNumberVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceProducts"
        },
        "PathPart": "{number}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProduct": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "product",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProductIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceProduct"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSearchproduct": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "searchproduct",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSearchproductNameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSearchproduct"
        },
        "PathPart": "{name}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAddcategories": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "addCategories",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAllcategories": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "allCategories",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCategories": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "categories",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCategoriesNumberVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCategories"
        },
        "PathPart": "{number}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "category",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCategoryIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCategory"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdatecategories": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "updatecategories",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletecategory": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "deletecategory",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletecategoryIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDeletecategory"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAddtags": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "addTags",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAlltags": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "allTags",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTags": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tags",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTagsNumberVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTags"
        },
        "PathPart": "{number}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTag": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tag",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTagIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTag"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdatetags": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "updatetags",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletetag": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "deletetag",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeletetagIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDeletetag"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAddorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "addOrder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAllorders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "allorders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrdersNumberVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceOrders"
        },
        "PathPart": "{number}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetsingleorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getSingleOrder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetsingleorderIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGetsingleorder"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdateorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "updateorder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeleteorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "deleteorder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDeleteorderIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDeleteorder"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentmethod": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "paymentMethod",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHomeGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceHome"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HomeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HomeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRegisterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RegisterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodVerifyPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVerify"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VerifyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VerifyLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAccountDashrecoveryPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAccountDashrecovery"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AccountDashrecoveryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AccountDashrecoveryLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodResetpasswordPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceResetpassword"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ResetPasswordLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ResetPasswordLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLogoutPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogout"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LogoutLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllUsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersNumberVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersNumberVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGetuserEmailVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetuserEmailVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdateuserPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateuser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDeleteuserEmailVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeleteuserEmailVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFilePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "S3FileUploaderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "S3FileUploaderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadcsvPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadcsv"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadCSVLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadCSVLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCsvtodynamodbPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCsvtodynamodb"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CsvToDynamodbLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CsvToDynamodbLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodListcsvGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceListcsv"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListcsvLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ListcsvLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDeletecsvFilenameVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeletecsvFilenameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeletecsvLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeletecsvLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSearchcsvNameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSearchcsvNameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SearchcsvLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SearchcsvLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAddproductsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddproducts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddProductsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddProductsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGetallproductsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetallproducts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllProductsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllProductsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductsNumberVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProductsNumberVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetProductsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetProductsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProductIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetProductLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetProductLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProduct"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateProductLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateProductLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProductIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteProductLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteProductLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSearchproductNameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSearchproductNameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SearchProductLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SearchProductLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAddcategoriesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddcategories"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddCategoriesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAllcategoriesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAllcategories"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AllCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AllCategoriesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCategoriesNumberVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCategoriesNumberVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetCategoriesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCategoryIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCategoryIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCategoryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetCategoryLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdatecategoriesPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdatecategories"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateCategoriesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDeletecategoryIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeletecategoryIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteCategoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteCategoriesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAddtagsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddtags"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddTagsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddTagsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAlltagsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAlltags"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AllTagsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AllTagsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTagsNumberVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTagsNumberVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTagsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTagsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTagIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTagIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTagLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTagLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdatetagsPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdatetags"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateTagsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateTagsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDeletetagIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeletetagIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteTagLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteTagLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAddorderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddorder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddOrderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAllordersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAllorders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AllOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AllOrdersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOrdersNumberVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrdersNumberVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetOrdersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGetsingleorderIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetsingleorderIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetSingleOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetSingleOrderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdateorderPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateorder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateOrderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDeleteorderIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDeleteorderIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteOrderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPaymentmethodPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePaymentmethod"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PaymentMethodLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PaymentMethodLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1670242908481": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodHomeGet",
        "ApiGatewayMethodRegisterPost",
        "ApiGatewayMethodLoginPost",
        "ApiGatewayMethodVerifyPost",
        "ApiGatewayMethodAccountDashrecoveryPost",
        "ApiGatewayMethodResetpasswordPut",
        "ApiGatewayMethodLogoutPost",
        "ApiGatewayMethodUsersGet",
        "ApiGatewayMethodUsersNumberVarGet",
        "ApiGatewayMethodGetuserEmailVarGet",
        "ApiGatewayMethodUpdateuserPut",
        "ApiGatewayMethodDeleteuserEmailVarDelete",
        "ApiGatewayMethodFilePost",
        "ApiGatewayMethodUploadcsvPost",
        "ApiGatewayMethodCsvtodynamodbPost",
        "ApiGatewayMethodUploadcsvPost",
        "ApiGatewayMethodListcsvGet",
        "ApiGatewayMethodDeletecsvFilenameVarDelete",
        "ApiGatewayMethodSearchcsvNameVarGet",
        "ApiGatewayMethodAddproductsPost",
        "ApiGatewayMethodGetallproductsGet",
        "ApiGatewayMethodProductsNumberVarGet",
        "ApiGatewayMethodProductIdVarGet",
        "ApiGatewayMethodProductPut",
        "ApiGatewayMethodProductIdVarDelete",
        "ApiGatewayMethodSearchproductNameVarGet",
        "ApiGatewayMethodAddcategoriesPost",
        "ApiGatewayMethodAllcategoriesGet",
        "ApiGatewayMethodCategoriesNumberVarGet",
        "ApiGatewayMethodCategoryIdVarGet",
        "ApiGatewayMethodUpdatecategoriesPut",
        "ApiGatewayMethodDeletecategoryIdVarDelete",
        "ApiGatewayMethodAddtagsPost",
        "ApiGatewayMethodAlltagsGet",
        "ApiGatewayMethodTagsNumberVarGet",
        "ApiGatewayMethodTagIdVarGet",
        "ApiGatewayMethodUpdatetagsPut",
        "ApiGatewayMethodDeletetagIdVarDelete",
        "ApiGatewayMethodAddorderPost",
        "ApiGatewayMethodAllordersGet",
        "ApiGatewayMethodOrdersNumberVarGet",
        "ApiGatewayMethodGetsingleorderIdVarGet",
        "ApiGatewayMethodUpdateorderPut",
        "ApiGatewayMethodDeleteorderIdVarDelete",
        "ApiGatewayMethodPaymentmethodPost"
      ]
    },
    "HomeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HomeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RegisterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VerifyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AccountDashrecoveryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AccountDashrecoveryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ResetPasswordLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ResetPasswordLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LogoutLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LogoutLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "S3FileUploaderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "S3FileUploaderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CsvUploaderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CsvUploaderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CsvToDynamodbLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CsvToDynamodbLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadCSVLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadCSVLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListcsvLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListcsvLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeletecsvLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeletecsvLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SearchcsvLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SearchcsvLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddProductsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddProductsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllProductsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllProductsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetProductsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetProductsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetProductLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetProductLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateProductLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateProductLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteProductLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteProductLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SearchProductLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SearchProductLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddCategoriesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AllCategoriesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AllCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCategoriesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCategoryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCategoryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCategoriesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteCategoriesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCategoriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddTagsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddTagsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AllTagsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AllTagsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTagsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTagsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTagLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTagLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateTagsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTagsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteTagLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTagLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AllOrdersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AllOrdersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetOrdersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetOrdersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetSingleOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSingleOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PaymentMethodLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PaymentMethodLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "OnlineStoreImages": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "onlinestoreimages"
      }
    },
    "OnlineStoreCSV": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "onlinestorecsv"
      }
    },
    "ProductsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "OnlineStoreProducts"
      }
    },
    "CategoriesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "OnlineStoreCategories"
      }
    },
    "TagsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "OnlineStoreTags"
      }
    },
    "OrderTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "OnlineStoreOrder"
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "OnlineStoreUser"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-ServerlessDeploymentBucketName"
      }
    },
    "HomeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HomeLambdaVersion6znszCzIZmBwPyygyOJIC0vGvB65QdKHSeUnu3pZ8"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-HomeLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaVersionj0cmLp0vby8uGELUbHGFzUnFXrjScy1gpTcdaGIqSg"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-RegisterLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersionK42VIdiuHlrVMPhh72BwRB4MERK3NypomM5q9fyqMOY"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "VerifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyLambdaVersiontp7mm0JyPvyVASUwcYyCzZ1QaNTxXKnBGg737U2s"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-VerifyLambdaFunctionQualifiedArn"
      }
    },
    "AccountDashrecoveryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AccountDashrecoveryLambdaVersioniuLjnTaQRswqSowShK1tlc1Qxf7qWF3ujQ13sJBg"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AccountDashrecoveryLambdaFunctionQualifiedArn"
      }
    },
    "ResetPasswordLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ResetPasswordLambdaVersionJd1VxQ10N3J6xXU8z3aPC0MNJX4CqPvsxbyz4gOlm8"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-ResetPasswordLambdaFunctionQualifiedArn"
      }
    },
    "LogoutLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LogoutLambdaVersionzVyjcUEWCISJjuWY8CiJuAupHM8VEm5ebSiNVldw"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-LogoutLambdaFunctionQualifiedArn"
      }
    },
    "GetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersLambdaVersionVAsmlOQLnchvk9LMYzbEua4NfABrCG8BnqQlMOhhDzk"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersLambdaVersionKq3LktHhhALj196LlKNAQM7d4sfXdCZXtwemNRc1Nk"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersionifjZLwsG3vMCGzhADf98XxVMkHpBN4GT0HDYQPRmlg"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersionNmYtd0nr8wtx1SM8UR01CYp4LsY6g1Nylz8OlDPeI"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "DeleteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUserLambdaVersion1ybYiqtZTH3WSv5qqbgXoiAW3dOv1jlbRyelQzsEbpo"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-DeleteUserLambdaFunctionQualifiedArn"
      }
    },
    "S3FileUploaderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "S3FileUploaderLambdaVersionG7hB1IodidGBFRIVqdO9L2bU88BbLWkRE1mWj2dlck"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-S3FileUploaderLambdaFunctionQualifiedArn"
      }
    },
    "CsvUploaderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CsvUploaderLambdaVersionEXdj2HBGjKe2z9hr7rEeL1usqZAMYZuOVlpsY1ab8"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-CsvUploaderLambdaFunctionQualifiedArn"
      }
    },
    "CsvToDynamodbLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CsvToDynamodbLambdaVersioncN4rC74n3yONtyhK5gNhXQvJJf0xdLbHEb39AtUeos"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-CsvToDynamodbLambdaFunctionQualifiedArn"
      }
    },
    "UploadCSVLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadCSVLambdaVersionJr5RvUeIDmqbHXuHBzkJvG03cdjshoaZCJw8FwjVJsM"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-UploadCSVLambdaFunctionQualifiedArn"
      }
    },
    "ListcsvLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListcsvLambdaVersionl7gsziiSQsHHN158zdd6VuUTN4QWlPWk6jpGEJ4yo"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-ListcsvLambdaFunctionQualifiedArn"
      }
    },
    "DeletecsvLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeletecsvLambdaVersionD8pCI1jymRQ7mQydZxKYiicO0lZ3wXDehdgpCzlwFEo"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-DeletecsvLambdaFunctionQualifiedArn"
      }
    },
    "SearchcsvLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SearchcsvLambdaVersionbJZeIoOWVX04low2p6LV8PQYrE1dzRGOeC7jZAoE"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-SearchcsvLambdaFunctionQualifiedArn"
      }
    },
    "AddProductsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddProductsLambdaVersionjSUU5slenN7Hhb0xoAHJ32DgmfCTDIw6e5Bqs34LgA"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AddProductsLambdaFunctionQualifiedArn"
      }
    },
    "GetAllProductsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllProductsLambdaVersionNHdQaxDvwgCIDdCLFrLE02KK0iJlnADYSzlw"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetAllProductsLambdaFunctionQualifiedArn"
      }
    },
    "GetProductsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetProductsLambdaVersionBnZiylfghrX0Me6kMuKyFzVhBmuQyXLpSQgTOB41no"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetProductsLambdaFunctionQualifiedArn"
      }
    },
    "GetProductLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetProductLambdaVersion7escifiwxJD4ql3BLj5qNFaQzlmMLqXEvoJRhkFxo"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetProductLambdaFunctionQualifiedArn"
      }
    },
    "UpdateProductLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateProductLambdaVersion3uRwDWlGWak7pnMRlBHA8V6NeqtsETdQE3I6MrYWbQc"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-UpdateProductLambdaFunctionQualifiedArn"
      }
    },
    "DeleteProductLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteProductLambdaVersionT35X8CCYFnEOHCJ4patMxrCtJe1ZpTZ1fdzQZfT8iI"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-DeleteProductLambdaFunctionQualifiedArn"
      }
    },
    "SearchProductLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SearchProductLambdaVersionsGQlrZA2DaQa57YxZVZIztOVaabMpJfTgCYzcWsPi54"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-SearchProductLambdaFunctionQualifiedArn"
      }
    },
    "AddCategoriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddCategoriesLambdaVersionj2a4OISeupzDgCb8WAwi4TRszdW6hX1e6RpY2AKcmk"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AddCategoriesLambdaFunctionQualifiedArn"
      }
    },
    "AllCategoriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AllCategoriesLambdaVersionyZ3OJp3cA4V2FTHyTyixpQ9APY8e7BJFZKmqK9BDt8"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AllCategoriesLambdaFunctionQualifiedArn"
      }
    },
    "GetCategoriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCategoriesLambdaVersioncRvZTyiwNCSRrVJ74sAaDh152tpcbpH8Sz5uLq35M"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetCategoriesLambdaFunctionQualifiedArn"
      }
    },
    "GetCategoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCategoryLambdaVersion4uTop9ipo0zn0dNezYSCvwoVSmb0bhCcmvndALG44E"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetCategoryLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCategoriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCategoriesLambdaVersionNPwYbSNiaV9BsFy5eRvDw14ItayeLfwbHtJQfa7tY"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-UpdateCategoriesLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCategoriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCategoriesLambdaVersionJ7RpYgTeohGwU4XkJ5vHxvEpFpbaKHTE0oOAGmxrR4"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-DeleteCategoriesLambdaFunctionQualifiedArn"
      }
    },
    "AddTagsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddTagsLambdaVersionb98f1epaSptmKp7sl7gViranrYjGOtjk5nvXNgmwSXU"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AddTagsLambdaFunctionQualifiedArn"
      }
    },
    "AllTagsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AllTagsLambdaVersionwki7Vxjfv86KovMD8YzweyMh0eW0wGt0T0YOJNNg"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AllTagsLambdaFunctionQualifiedArn"
      }
    },
    "GetTagsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTagsLambdaVersionO8NGQwtu4kdHmnIRJH6TaQKf4Nq06AeIlwvf3Brg6k"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetTagsLambdaFunctionQualifiedArn"
      }
    },
    "GetTagLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTagLambdaVersionaax8S5tbeQb1GwZZiZwuGpgeDLqKc4AvvdS4TdXzo8"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetTagLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTagsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTagsLambdaVersionigW4u31edCr9glksgaVtEaRDih7FxSTe6PlTv4X4"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-UpdateTagsLambdaFunctionQualifiedArn"
      }
    },
    "DeleteTagLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteTagLambdaVersionRgkCarwgV4jG0m3LebkCiWxiPG91I4B4ncDzVVW03M"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-DeleteTagLambdaFunctionQualifiedArn"
      }
    },
    "AddOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddOrderLambdaVersionO1QlgvheM1fw8g0vixUyQAgYBEsmbAm2q5gWk8VY"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AddOrderLambdaFunctionQualifiedArn"
      }
    },
    "AllOrdersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AllOrdersLambdaVersionpyGzalPPIFKDjyeoWSzwT7dMUuOFbWFzevvu3QXe81Y"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-AllOrdersLambdaFunctionQualifiedArn"
      }
    },
    "GetOrdersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetOrdersLambdaVersionxdFvap0UYwD43dJdf7lsWRzPzpr5owo54MD1oJg2Evo"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetOrdersLambdaFunctionQualifiedArn"
      }
    },
    "GetSingleOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSingleOrderLambdaVersion28c7dBc7B0Ski0VHhX66cFlw8nyA81S6RhH9xWsc"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-GetSingleOrderLambdaFunctionQualifiedArn"
      }
    },
    "UpdateOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateOrderLambdaVersionNZi5qJtHgfSnpVnEz1mCyTcbbpQDX4gDpHJfZA4dNw"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-UpdateOrderLambdaFunctionQualifiedArn"
      }
    },
    "DeleteOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteOrderLambdaVersion5RPz8ieFFkz28uT8mTkyAbx6hkvr4SZGKblLxpKOuo"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-DeleteOrderLambdaFunctionQualifiedArn"
      }
    },
    "PaymentMethodLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PaymentMethodLambdaVersionOhxZGGF7luUCy71x28xeB0pUpqD6awPjVFPq72R9tI"
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-PaymentMethodLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-OnlineStore-dev-ServiceEndpoint"
      }
    }
  }
}