{
  "service": {
    "service": "OnlineStore",
    "serviceObject": {
      "name": "OnlineStore"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "environment": {
        "USERS_TABLE": "OnlineStoreUser",
        "PRODUCTS_TABLE": "OnlineStoreProducts",
        "CATEGORIES_TABLE": "OnlineStoreCategories",
        "TAGS_TABLE": "OnlineStoreTags",
        "ORDER_TABLE": "OnlineStoreOrder",
        "IMAGES_BUCKET": "onlinestoreimages",
        "JWT_SECRET": "OnlineStoreUser"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "s3:Put*",
            "ses:*"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreUser",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreProducts",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreCategories",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreTags",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreOrder",
            "arn:aws:s3:::onlinestoreimages/*",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreUser"
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HomeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Home"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Register"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Login"
            }
          },
          "VerifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Verify"
            }
          },
          "AccountDashrecoveryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-account-recovery"
            }
          },
          "ResetPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-ResetPassword"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getAllUsers"
            }
          },
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getUsers"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteUser"
            }
          },
          "S3FileUploaderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-s3FileUploader"
            }
          },
          "CsvUploaderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-csvUploader"
            }
          },
          "CsvToDynamodbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-csvToDynamodb"
            }
          },
          "AddProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addProducts"
            }
          },
          "GetAllProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getAllProducts"
            }
          },
          "GetProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getProducts"
            }
          },
          "GetProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getProduct"
            }
          },
          "UpdateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateProduct"
            }
          },
          "DeleteProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteProduct"
            }
          },
          "SearchProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-searchProduct"
            }
          },
          "AddCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addCategories"
            }
          },
          "AllCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-allCategories"
            }
          },
          "GetCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getCategories"
            }
          },
          "GetCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getCategory"
            }
          },
          "UpdateCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateCategories"
            }
          },
          "DeleteCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteCategories"
            }
          },
          "AddTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addTags"
            }
          },
          "AllTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-allTags"
            }
          },
          "GetTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getTags"
            }
          },
          "GetTagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getTag"
            }
          },
          "UpdateTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateTags"
            }
          },
          "DeleteTagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteTag"
            }
          },
          "AddOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addOrder"
            }
          },
          "AllOrdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-allOrders"
            }
          },
          "GetOrdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getOrders"
            }
          },
          "GetSingleOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getSingleOrder"
            }
          },
          "UpdateOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateOrder"
            }
          },
          "DeleteOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteOrder"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "OnlineStore",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OnlineStore-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OnlineStore-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "OnlineStore",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HomeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Home",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HomeLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "VerifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Verify",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyLogGroup"
            ]
          },
          "AccountDashrecoveryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-account-recovery",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AccountDashrecoveryLogGroup"
            ]
          },
          "ResetPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-ResetPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ResetPasswordLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/users.getAllUsers",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/users.getUsers",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/users.getUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/users.updateUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Users/users.deleteUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "S3FileUploaderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/products.uploadfile",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-s3FileUploader",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "S3FileUploaderLogGroup"
            ]
          },
          "CsvUploaderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/uploadcsv.uploadcsv",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-csvUploader",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CsvUploaderLogGroup"
            ]
          },
          "CsvToDynamodbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/csvtodynamodb.csvtodynamodb",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-csvToDynamodb",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CsvToDynamodbLogGroup"
            ]
          },
          "AddProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.addProducts",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddProductsLogGroup"
            ]
          },
          "GetAllProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.getAllProducts",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getAllProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllProductsLogGroup"
            ]
          },
          "GetProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.getProducts",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsLogGroup"
            ]
          },
          "GetProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.getProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductLogGroup"
            ]
          },
          "UpdateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.updateProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProductLogGroup"
            ]
          },
          "DeleteProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.deleteProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteProductLogGroup"
            ]
          },
          "SearchProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.searchProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-searchProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SearchProductLogGroup"
            ]
          },
          "AddCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.addCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddCategoriesLogGroup"
            ]
          },
          "AllCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.allCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-allCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AllCategoriesLogGroup"
            ]
          },
          "GetCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.getCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCategoriesLogGroup"
            ]
          },
          "GetCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.getCategory",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCategoryLogGroup"
            ]
          },
          "UpdateCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.updateCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCategoriesLogGroup"
            ]
          },
          "DeleteCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.deleteCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCategoriesLogGroup"
            ]
          },
          "AddTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.addTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddTagsLogGroup"
            ]
          },
          "AllTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.allTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-allTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AllTagsLogGroup"
            ]
          },
          "GetTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.getTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagsLogGroup"
            ]
          },
          "GetTagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.getTag",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getTag",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagLogGroup"
            ]
          },
          "UpdateTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.updateTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTagsLogGroup"
            ]
          },
          "DeleteTagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.deleteTag",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteTag",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTagLogGroup"
            ]
          },
          "AddOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Order/order.addOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddOrderLogGroup"
            ]
          },
          "AllOrdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Order/order.allOrders",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-allOrders",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AllOrdersLogGroup"
            ]
          },
          "GetOrdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Order/order.getOrders",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getOrders",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOrdersLogGroup"
            ]
          },
          "GetSingleOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Order/order.getSingleOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getSingleOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSingleOrderLogGroup"
            ]
          },
          "UpdateOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Order/order.updateOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateOrderLogGroup"
            ]
          },
          "DeleteOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z/OnlineStore.zip"
              },
              "Handler": "Order/order.deleteOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "IMAGES_BUCKET": "onlinestoreimages",
                  "JWT_SECRET": "OnlineStoreUser"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteOrderLogGroup"
            ]
          },
          "HomeLambdaVersionlvmx9Tt8BlAYaslQJcEjhkZk9Dytx9W2SOO4FW8pjb0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HomeLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "RegisterLambdaVersioniZSNAm1tWsFRt6ZbBB8WAOctpzTqBoERhHr8G4KaqVs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "LoginLambdaVersion6k6rqhzi5Cc0vWY4eNq87JG6wa2EIRxti0sQlxLOk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "VerifyLambdaVersionA4AknKC0bfZ3TmNll3Kn5sUTxcYyAchvA3raP2g51g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AccountDashrecoveryLambdaVersion7GvDyvCU95XdfPFEwi74AjHGdWAnCJtnJeizLlTPU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AccountDashrecoveryLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "ResetPasswordLambdaVersioneLVy1hvG9YUziAgQfOmh24mPEFT3WS0gAl6MdTaaY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResetPasswordLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetAllUsersLambdaVersionZxHT02flIAFcE2QLSYI5LkuCZAUcc5tHTiTObkuk0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetUsersLambdaVersionloFWEZ1bY0iof1nKLYPZ1SJ3DORtXb7Uti2I9lcuEHo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetUserLambdaVersionftixOFomRNXicDN0YMYngoEj6EvkfdE4r8k3vi25LUE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "UpdateUserLambdaVersionmm2RgLlqejDUK8rFWRRVZBafMY5J2NuHWyfqXe0tzg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "DeleteUserLambdaVersionGWB5JuYUVlM15l2jzNgUEETVpncHl9Em50TlEBepD6E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "S3FileUploaderLambdaVersionwxVrHZLtaGujPp9tfI4DLRk1tiTmf2f5y6teDTQDIU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "S3FileUploaderLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "CsvUploaderLambdaVersionK3zKFN2l2UIlSvCMNQTuBAYHKsV26aoljKaXXVRzibg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CsvUploaderLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "CsvToDynamodbLambdaVersionSAnWbPESMOiNcE7CyhwQCDzeMVu4mCSmDNjLOQ7xyY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CsvToDynamodbLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AddProductsLambdaVersionHXuyVypw8QHYePkjDQJHR2qUBcyyxY0NYSj4rEIrAA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddProductsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetAllProductsLambdaVersions86s52c6jaJ9wtD5FG4jjO6SllZGj5wbgMzwfCWcWsk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllProductsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetProductsLambdaVersionJoqYeyi6KJvKFpC7zrHvlwMGciFVsfEyFyudKID0EU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetProductLambdaVersiongVeQxNC5ocCzKEIkv7D8NuJhbznNBKw1sqrGZlrVha8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "UpdateProductLambdaVersionteFjvQa8fSD3WwSYrMHCTkszLFd4Cfy8cizSentyjA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProductLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "DeleteProductLambdaVersionePNTEWjBO8beZ2QaawzepftRJkmDK8J54vywUB4AZI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProductLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "SearchProductLambdaVersiontIQCRQtWslcW4pXeFycKV7S3TpCa6i0jUuMLq3EvkjI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchProductLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AddCategoriesLambdaVersionPoxFpTIT9Z2EzrBD6nkAHxrCIXYV93Pyw005isFh7A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddCategoriesLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AllCategoriesLambdaVersionEsYpqu9dimFZjaB0QGcXzz3mJLxQPvv0toTQ6qFDM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllCategoriesLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetCategoriesLambdaVersionGCiALzmSbI0BFt3e02D70S4urATG4IHp9sSSURsE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCategoriesLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetCategoryLambdaVersion5pzx8Te4RfjWV29TKXajEWIW9CXNnnaUgnmG3wRkIs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCategoryLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "UpdateCategoriesLambdaVersiontKXCLo09BZNCLliWZk5AUcpYTcJaqcpTaDHITvxv3w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCategoriesLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "DeleteCategoriesLambdaVersionqcy69hmPHUJHjaWM5iQmurOBNA3Qp0lhwLHVdg0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCategoriesLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AddTagsLambdaVersionYpkcmt0RCt6A0PNW0rqivCyYLUld9HfrU5ZDtxvPkvs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddTagsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AllTagsLambdaVersion4MQsIhpuDAIoNpamV3mXTv07I9Z77Ik6PTFZbQIMr4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllTagsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetTagsLambdaVersionhVP5lvhVhP1XkWkZi2SYAWGp7PN0xauDLQfueDZvjg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetTagLambdaVersionKSuLo8935o5AYTPHNncHON2ghpZ6UqwKovTF92zLq4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "UpdateTagsLambdaVersioncebk7F9TOOXBBNQ57hsbZYNYcJlprah8h0G2Mutmjs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTagsLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "DeleteTagLambdaVersionjyiy8YMRTAkRjdq8qeUF2NCQxRKcsp8IaWIqwFObT5c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTagLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AddOrderLambdaVersionKjPGotizxmHHrplS6ZuExNX2uHl2cgAXSl3hdmMGCI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddOrderLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "AllOrdersLambdaVersionFjIGSfPQGThrFaOGZ898KlOXI9oIHdkDkE3imUTo4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllOrdersLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetOrdersLambdaVersionis0C7vCdRjyH9p9qLBQwATKHbmgUivWT6uGfXZhMbQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOrdersLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "GetSingleOrderLambdaVersion3ux02xBJVRWdQYN3JCXYsfnqh54EkDBvHg4cYGij4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSingleOrderLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "UpdateOrderLambdaVersionC6HZz5xifYqtKoal35T4HZOQz1M7LDVbnUxCQSiwXDw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateOrderLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "DeleteOrderLambdaVersionU1nF6JAxZuVzWf0fAKDSmTDLpccXti316s0zoCLo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteOrderLambdaFunction"
              },
              "CodeSha256": "rn/fC5sE5LqQbds3blVNTwzmbVOaLKkE3PHT3SIpxko="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-OnlineStore",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHome": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "home",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceVerify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "verify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccountDashrecovery": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "account-recovery",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResetpassword": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "resetpassword",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetuserEmailVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGetuser"
              },
              "PathPart": "{email}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updateuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deleteuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteuserEmailVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeleteuser"
              },
              "PathPart": "{email}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "file",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUploadcsv": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "uploadcsv",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCsvtodynamodb": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "csvtodynamodb",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddproducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addProducts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetallproducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getAllProducts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "products",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "product",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchproduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "searchproduct",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchproductNameVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSearchproduct"
              },
              "PathPart": "{name}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddcategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addCategories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllcategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allCategories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "categories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategoriesNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCategories"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "category",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategoryIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCategory"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdatecategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updatecategories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletecategory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deletecategory",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletecategoryIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeletecategory"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddtags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addTags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlltags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allTags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTagsNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTags"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTag": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tag",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTagIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTag"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdatetags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updatetags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletetag": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deletetag",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletetagIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeletetag"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addOrder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllorders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allorders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "orders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetsingleorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getSingleOrder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetsingleorderIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGetsingleorder"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updateorder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deleteorder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteorderIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeleteorder"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHomeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHome"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HomeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HomeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodVerifyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "VerifyLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAccountDashrecoveryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountDashrecovery"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AccountDashrecoveryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AccountDashrecoveryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResetpasswordPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResetpassword"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResetPasswordLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ResetPasswordLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetuserEmailVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetuserEmailVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateuserPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteuserEmailVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteuserEmailVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFilePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "S3FileUploaderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "S3FileUploaderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUploadcsvPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadcsv"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CsvUploaderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CsvUploaderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCsvtodynamodbPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCsvtodynamodb"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CsvToDynamodbLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CsvToDynamodbLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddproductsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddproducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetallproductsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetallproducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSearchproductNameVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSearchproductNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SearchProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SearchProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddcategoriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddcategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAllcategoriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllcategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AllCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AllCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCategoriesNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCategoriesNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCategoryIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCategoryIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetCategoryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdatecategoriesPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdatecategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeletecategoryIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletecategoryIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddtagsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddtags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAlltagsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlltags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AllTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AllTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTagsNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagsNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTagIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTagLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdatetagsPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdatetags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeletetagIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletetagIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteTagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteTagLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddorderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddorder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAllordersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllorders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AllOrdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AllOrdersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrdersNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrdersNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOrdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOrdersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetsingleorderIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetsingleorderIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSingleOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSingleOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateorderPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateorder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteorderIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteorderIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1667912338281": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHomeGet",
              "ApiGatewayMethodRegisterPost",
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodVerifyPost",
              "ApiGatewayMethodAccountDashrecoveryPost",
              "ApiGatewayMethodResetpasswordPut",
              "ApiGatewayMethodUsersGet",
              "ApiGatewayMethodUsersNumberVarGet",
              "ApiGatewayMethodGetuserEmailVarGet",
              "ApiGatewayMethodUpdateuserPut",
              "ApiGatewayMethodDeleteuserEmailVarDelete",
              "ApiGatewayMethodFilePost",
              "ApiGatewayMethodUploadcsvPost",
              "ApiGatewayMethodCsvtodynamodbPost",
              "ApiGatewayMethodAddproductsPost",
              "ApiGatewayMethodGetallproductsGet",
              "ApiGatewayMethodProductsNumberVarGet",
              "ApiGatewayMethodProductIdVarGet",
              "ApiGatewayMethodProductPut",
              "ApiGatewayMethodProductIdVarDelete",
              "ApiGatewayMethodSearchproductNameVarGet",
              "ApiGatewayMethodAddcategoriesPost",
              "ApiGatewayMethodAllcategoriesGet",
              "ApiGatewayMethodCategoriesNumberVarGet",
              "ApiGatewayMethodCategoryIdVarGet",
              "ApiGatewayMethodUpdatecategoriesPut",
              "ApiGatewayMethodDeletecategoryIdVarDelete",
              "ApiGatewayMethodAddtagsPost",
              "ApiGatewayMethodAlltagsGet",
              "ApiGatewayMethodTagsNumberVarGet",
              "ApiGatewayMethodTagIdVarGet",
              "ApiGatewayMethodUpdatetagsPut",
              "ApiGatewayMethodDeletetagIdVarDelete",
              "ApiGatewayMethodAddorderPost",
              "ApiGatewayMethodAllordersGet",
              "ApiGatewayMethodOrdersNumberVarGet",
              "ApiGatewayMethodGetsingleorderIdVarGet",
              "ApiGatewayMethodUpdateorderPut",
              "ApiGatewayMethodDeleteorderIdVarDelete"
            ]
          },
          "HomeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AccountDashrecoveryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AccountDashrecoveryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ResetPasswordLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResetPasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "S3FileUploaderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "S3FileUploaderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CsvUploaderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CsvUploaderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CsvToDynamodbLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CsvToDynamodbLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SearchProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AllCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AllCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCategoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCategoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AllTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AllTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteTagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AllOrdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AllOrdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOrdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOrdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSingleOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSingleOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "OnlineStoreImages": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "onlinestoreimages"
            }
          },
          "ProductsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreProducts"
            }
          },
          "CategoriesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreCategories"
            }
          },
          "TagsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreTags"
            }
          },
          "OrderTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreOrder"
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreUser"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ServerlessDeploymentBucketName"
            }
          },
          "HomeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HomeLambdaVersionlvmx9Tt8BlAYaslQJcEjhkZk9Dytx9W2SOO4FW8pjb0"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-HomeLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersioniZSNAm1tWsFRt6ZbBB8WAOctpzTqBoERhHr8G4KaqVs"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersion6k6rqhzi5Cc0vWY4eNq87JG6wa2EIRxti0sQlxLOk"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "VerifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyLambdaVersionA4AknKC0bfZ3TmNll3Kn5sUTxcYyAchvA3raP2g51g"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-VerifyLambdaFunctionQualifiedArn"
            }
          },
          "AccountDashrecoveryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AccountDashrecoveryLambdaVersion7GvDyvCU95XdfPFEwi74AjHGdWAnCJtnJeizLlTPU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AccountDashrecoveryLambdaFunctionQualifiedArn"
            }
          },
          "ResetPasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResetPasswordLambdaVersioneLVy1hvG9YUziAgQfOmh24mPEFT3WS0gAl6MdTaaY"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ResetPasswordLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionZxHT02flIAFcE2QLSYI5LkuCZAUcc5tHTiTObkuk0"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionloFWEZ1bY0iof1nKLYPZ1SJ3DORtXb7Uti2I9lcuEHo"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionftixOFomRNXicDN0YMYngoEj6EvkfdE4r8k3vi25LUE"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionmm2RgLlqejDUK8rFWRRVZBafMY5J2NuHWyfqXe0tzg"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionGWB5JuYUVlM15l2jzNgUEETVpncHl9Em50TlEBepD6E"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "S3FileUploaderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "S3FileUploaderLambdaVersionwxVrHZLtaGujPp9tfI4DLRk1tiTmf2f5y6teDTQDIU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-S3FileUploaderLambdaFunctionQualifiedArn"
            }
          },
          "CsvUploaderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CsvUploaderLambdaVersionK3zKFN2l2UIlSvCMNQTuBAYHKsV26aoljKaXXVRzibg"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-CsvUploaderLambdaFunctionQualifiedArn"
            }
          },
          "CsvToDynamodbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CsvToDynamodbLambdaVersionSAnWbPESMOiNcE7CyhwQCDzeMVu4mCSmDNjLOQ7xyY"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-CsvToDynamodbLambdaFunctionQualifiedArn"
            }
          },
          "AddProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddProductsLambdaVersionHXuyVypw8QHYePkjDQJHR2qUBcyyxY0NYSj4rEIrAA"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetAllProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllProductsLambdaVersions86s52c6jaJ9wtD5FG4jjO6SllZGj5wbgMzwfCWcWsk"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetAllProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsLambdaVersionJoqYeyi6KJvKFpC7zrHvlwMGciFVsfEyFyudKID0EU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductLambdaVersiongVeQxNC5ocCzKEIkv7D8NuJhbznNBKw1sqrGZlrVha8"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetProductLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProductLambdaVersionteFjvQa8fSD3WwSYrMHCTkszLFd4Cfy8cizSentyjA"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateProductLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProductLambdaVersionePNTEWjBO8beZ2QaawzepftRJkmDK8J54vywUB4AZI"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteProductLambdaFunctionQualifiedArn"
            }
          },
          "SearchProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchProductLambdaVersiontIQCRQtWslcW4pXeFycKV7S3TpCa6i0jUuMLq3EvkjI"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-SearchProductLambdaFunctionQualifiedArn"
            }
          },
          "AddCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddCategoriesLambdaVersionPoxFpTIT9Z2EzrBD6nkAHxrCIXYV93Pyw005isFh7A"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "AllCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllCategoriesLambdaVersionEsYpqu9dimFZjaB0QGcXzz3mJLxQPvv0toTQ6qFDM"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AllCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "GetCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCategoriesLambdaVersionGCiALzmSbI0BFt3e02D70S4urATG4IHp9sSSURsE"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "GetCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCategoryLambdaVersion5pzx8Te4RfjWV29TKXajEWIW9CXNnnaUgnmG3wRkIs"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetCategoryLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCategoriesLambdaVersiontKXCLo09BZNCLliWZk5AUcpYTcJaqcpTaDHITvxv3w"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCategoriesLambdaVersionqcy69hmPHUJHjaWM5iQmurOBNA3Qp0lhwLHVdg0"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "AddTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddTagsLambdaVersionYpkcmt0RCt6A0PNW0rqivCyYLUld9HfrU5ZDtxvPkvs"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddTagsLambdaFunctionQualifiedArn"
            }
          },
          "AllTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllTagsLambdaVersion4MQsIhpuDAIoNpamV3mXTv07I9Z77Ik6PTFZbQIMr4"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AllTagsLambdaFunctionQualifiedArn"
            }
          },
          "GetTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagsLambdaVersionhVP5lvhVhP1XkWkZi2SYAWGp7PN0xauDLQfueDZvjg"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetTagsLambdaFunctionQualifiedArn"
            }
          },
          "GetTagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagLambdaVersionKSuLo8935o5AYTPHNncHON2ghpZ6UqwKovTF92zLq4"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetTagLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTagsLambdaVersioncebk7F9TOOXBBNQ57hsbZYNYcJlprah8h0G2Mutmjs"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateTagsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTagLambdaVersionjyiy8YMRTAkRjdq8qeUF2NCQxRKcsp8IaWIqwFObT5c"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteTagLambdaFunctionQualifiedArn"
            }
          },
          "AddOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddOrderLambdaVersionKjPGotizxmHHrplS6ZuExNX2uHl2cgAXSl3hdmMGCI"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddOrderLambdaFunctionQualifiedArn"
            }
          },
          "AllOrdersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllOrdersLambdaVersionFjIGSfPQGThrFaOGZ898KlOXI9oIHdkDkE3imUTo4"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AllOrdersLambdaFunctionQualifiedArn"
            }
          },
          "GetOrdersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOrdersLambdaVersionis0C7vCdRjyH9p9qLBQwATKHbmgUivWT6uGfXZhMbQ"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetOrdersLambdaFunctionQualifiedArn"
            }
          },
          "GetSingleOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSingleOrderLambdaVersion3ux02xBJVRWdQYN3JCXYsfnqh54EkDBvHg4cYGij4"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetSingleOrderLambdaFunctionQualifiedArn"
            }
          },
          "UpdateOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateOrderLambdaVersionC6HZz5xifYqtKoal35T4HZOQz1M7LDVbnUxCQSiwXDw"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateOrderLambdaFunctionQualifiedArn"
            }
          },
          "DeleteOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteOrderLambdaVersionU1nF6JAxZuVzWf0fAKDSmTDLpccXti316s0zoCLo"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteOrderLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "settings": {
        "USERS_TABLE": "OnlineStoreUser",
        "PRODUCTS_TABLE": "OnlineStoreProducts",
        "CATEGORIES_TABLE": "OnlineStoreCategories",
        "TAGS_TABLE": "OnlineStoreTags",
        "ORDER_TABLE": "OnlineStoreOrder",
        "IMAGES_BUCKET": "onlinestoreimages",
        "JWT_SECRET": "OnlineStoreUser"
      }
    },
    "pluginsData": {},
    "functions": {
      "Home": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "home",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Home",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "HomeLambdaVersionlvmx9Tt8BlAYaslQJcEjhkZk9Dytx9W2SOO4FW8pjb0"
      },
      "Register": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "register",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Register",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RegisterLambdaVersioniZSNAm1tWsFRt6ZbBB8WAOctpzTqBoERhHr8G4KaqVs"
      },
      "Login": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersion6k6rqhzi5Cc0vWY4eNq87JG6wa2EIRxti0sQlxLOk"
      },
      "Verify": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "verify",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Verify",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "VerifyLambdaVersionA4AknKC0bfZ3TmNll3Kn5sUTxcYyAchvA3raP2g51g"
      },
      "account-recovery": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "account-recovery",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-account-recovery",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AccountDashrecoveryLambdaVersion7GvDyvCU95XdfPFEwi74AjHGdWAnCJtnJeizLlTPU"
      },
      "ResetPassword": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "resetpassword",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-ResetPassword",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ResetPasswordLambdaVersioneLVy1hvG9YUziAgQfOmh24mPEFT3WS0gAl6MdTaaY"
      },
      "getAllUsers": {
        "handler": "Users/users.getAllUsers",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getAllUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionZxHT02flIAFcE2QLSYI5LkuCZAUcc5tHTiTObkuk0"
      },
      "getUsers": {
        "handler": "Users/users.getUsers",
        "events": [
          {
            "http": {
              "path": "users/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionloFWEZ1bY0iof1nKLYPZ1SJ3DORtXb7Uti2I9lcuEHo"
      },
      "getUser": {
        "handler": "Users/users.getUser",
        "events": [
          {
            "http": {
              "path": "getuser/{email}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionftixOFomRNXicDN0YMYngoEj6EvkfdE4r8k3vi25LUE"
      },
      "updateUser": {
        "handler": "Users/users.updateUser",
        "events": [
          {
            "http": {
              "path": "updateuser",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionmm2RgLlqejDUK8rFWRRVZBafMY5J2NuHWyfqXe0tzg"
      },
      "deleteUser": {
        "handler": "Users/users.deleteUser",
        "events": [
          {
            "http": {
              "path": "deleteuser/{email}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionGWB5JuYUVlM15l2jzNgUEETVpncHl9Em50TlEBepD6E"
      },
      "s3FileUploader": {
        "handler": "Products/products.uploadfile",
        "events": [
          {
            "http": {
              "path": "file",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-s3FileUploader",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "S3FileUploaderLambdaVersionwxVrHZLtaGujPp9tfI4DLRk1tiTmf2f5y6teDTQDIU"
      },
      "csvUploader": {
        "handler": "Products/uploadcsv.uploadcsv",
        "events": [
          {
            "http": {
              "path": "uploadcsv",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-csvUploader",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CsvUploaderLambdaVersionK3zKFN2l2UIlSvCMNQTuBAYHKsV26aoljKaXXVRzibg"
      },
      "csvToDynamodb": {
        "handler": "Products/csvtodynamodb.csvtodynamodb",
        "events": [
          {
            "http": {
              "path": "csvtodynamodb",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-csvToDynamodb",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CsvToDynamodbLambdaVersionSAnWbPESMOiNcE7CyhwQCDzeMVu4mCSmDNjLOQ7xyY"
      },
      "addProducts": {
        "handler": "Products/addProducts.addProducts",
        "events": [
          {
            "http": {
              "path": "addProducts",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddProductsLambdaVersionHXuyVypw8QHYePkjDQJHR2qUBcyyxY0NYSj4rEIrAA"
      },
      "getAllProducts": {
        "handler": "Products/addProducts.getAllProducts",
        "events": [
          {
            "http": {
              "path": "getAllProducts",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getAllProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllProductsLambdaVersions86s52c6jaJ9wtD5FG4jjO6SllZGj5wbgMzwfCWcWsk"
      },
      "getProducts": {
        "handler": "Products/addProducts.getProducts",
        "events": [
          {
            "http": {
              "path": "products/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetProductsLambdaVersionJoqYeyi6KJvKFpC7zrHvlwMGciFVsfEyFyudKID0EU"
      },
      "getProduct": {
        "handler": "Products/addProducts.getProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetProductLambdaVersiongVeQxNC5ocCzKEIkv7D8NuJhbznNBKw1sqrGZlrVha8"
      },
      "updateProduct": {
        "handler": "Products/addProducts.updateProduct",
        "events": [
          {
            "http": {
              "path": "product",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateProductLambdaVersionteFjvQa8fSD3WwSYrMHCTkszLFd4Cfy8cizSentyjA"
      },
      "deleteProduct": {
        "handler": "Products/addProducts.deleteProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteProductLambdaVersionePNTEWjBO8beZ2QaawzepftRJkmDK8J54vywUB4AZI"
      },
      "searchProduct": {
        "handler": "Products/addProducts.searchProduct",
        "events": [
          {
            "http": {
              "path": "searchproduct/{name}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-searchProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SearchProductLambdaVersiontIQCRQtWslcW4pXeFycKV7S3TpCa6i0jUuMLq3EvkjI"
      },
      "addCategories": {
        "handler": "Categories/categories.addCategories",
        "events": [
          {
            "http": {
              "path": "addCategories",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddCategoriesLambdaVersionPoxFpTIT9Z2EzrBD6nkAHxrCIXYV93Pyw005isFh7A"
      },
      "allCategories": {
        "handler": "Categories/categories.allCategories",
        "events": [
          {
            "http": {
              "path": "allCategories",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-allCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AllCategoriesLambdaVersionEsYpqu9dimFZjaB0QGcXzz3mJLxQPvv0toTQ6qFDM"
      },
      "getCategories": {
        "handler": "Categories/categories.getCategories",
        "events": [
          {
            "http": {
              "path": "categories/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCategoriesLambdaVersionGCiALzmSbI0BFt3e02D70S4urATG4IHp9sSSURsE"
      },
      "getCategory": {
        "handler": "Categories/categories.getCategory",
        "events": [
          {
            "http": {
              "path": "category/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getCategory",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCategoryLambdaVersion5pzx8Te4RfjWV29TKXajEWIW9CXNnnaUgnmG3wRkIs"
      },
      "updateCategories": {
        "handler": "Categories/categories.updateCategories",
        "events": [
          {
            "http": {
              "path": "updatecategories",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateCategoriesLambdaVersiontKXCLo09BZNCLliWZk5AUcpYTcJaqcpTaDHITvxv3w"
      },
      "deleteCategories": {
        "handler": "Categories/categories.deleteCategories",
        "events": [
          {
            "http": {
              "path": "deletecategory/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteCategoriesLambdaVersionqcy69hmPHUJHjaWM5iQmurOBNA3Qp0lhwLHVdg0"
      },
      "addTags": {
        "handler": "Tags/tags.addTags",
        "events": [
          {
            "http": {
              "path": "addTags",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddTagsLambdaVersionYpkcmt0RCt6A0PNW0rqivCyYLUld9HfrU5ZDtxvPkvs"
      },
      "allTags": {
        "handler": "Tags/tags.allTags",
        "events": [
          {
            "http": {
              "path": "allTags",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-allTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AllTagsLambdaVersion4MQsIhpuDAIoNpamV3mXTv07I9Z77Ik6PTFZbQIMr4"
      },
      "getTags": {
        "handler": "Tags/tags.getTags",
        "events": [
          {
            "http": {
              "path": "tags/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTagsLambdaVersionhVP5lvhVhP1XkWkZi2SYAWGp7PN0xauDLQfueDZvjg"
      },
      "getTag": {
        "handler": "Tags/tags.getTag",
        "events": [
          {
            "http": {
              "path": "tag/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getTag",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTagLambdaVersionKSuLo8935o5AYTPHNncHON2ghpZ6UqwKovTF92zLq4"
      },
      "updateTags": {
        "handler": "Tags/tags.updateTags",
        "events": [
          {
            "http": {
              "path": "updatetags",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateTagsLambdaVersioncebk7F9TOOXBBNQ57hsbZYNYcJlprah8h0G2Mutmjs"
      },
      "deleteTag": {
        "handler": "Tags/tags.deleteTag",
        "events": [
          {
            "http": {
              "path": "deletetag/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteTag",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteTagLambdaVersionjyiy8YMRTAkRjdq8qeUF2NCQxRKcsp8IaWIqwFObT5c"
      },
      "addOrder": {
        "handler": "Order/order.addOrder",
        "events": [
          {
            "http": {
              "path": "addOrder",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddOrderLambdaVersionKjPGotizxmHHrplS6ZuExNX2uHl2cgAXSl3hdmMGCI"
      },
      "allOrders": {
        "handler": "Order/order.allOrders",
        "events": [
          {
            "http": {
              "path": "allorders",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-allOrders",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AllOrdersLambdaVersionFjIGSfPQGThrFaOGZ898KlOXI9oIHdkDkE3imUTo4"
      },
      "getOrders": {
        "handler": "Order/order.getOrders",
        "events": [
          {
            "http": {
              "path": "orders/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getOrders",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetOrdersLambdaVersionis0C7vCdRjyH9p9qLBQwATKHbmgUivWT6uGfXZhMbQ"
      },
      "getSingleOrder": {
        "handler": "Order/order.getSingleOrder",
        "events": [
          {
            "http": {
              "path": "getSingleOrder/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getSingleOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetSingleOrderLambdaVersion3ux02xBJVRWdQYN3JCXYsfnqh54EkDBvHg4cYGij4"
      },
      "updateOrder": {
        "handler": "Order/order.updateOrder",
        "events": [
          {
            "http": {
              "path": "updateorder",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateOrderLambdaVersionC6HZz5xifYqtKoal35T4HZOQz1M7LDVbnUxCQSiwXDw"
      },
      "deleteOrder": {
        "handler": "Order/order.deleteOrder",
        "events": [
          {
            "http": {
              "path": "deleteorder/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteOrderLambdaVersionU1nF6JAxZuVzWf0fAKDSmTDLpccXti316s0zoCLo"
      }
    },
    "resources": {
      "Resources": {
        "OnlineStoreImages": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "onlinestoreimages"
          }
        },
        "ProductsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreProducts"
          }
        },
        "CategoriesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreCategories"
          }
        },
        "TagsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreTags"
          }
        },
        "OrderTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreOrder"
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreUser"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "OnlineStore",
      "frameworkVersion": "3",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Riaz Ahmad\\Desktop\\OnlineStore\\.serverless\\OnlineStore.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/OnlineStore/dev/1667912383302-2022-11-08T12:59:43.302Z",
    "artifact": "OnlineStore.zip"
  }
}