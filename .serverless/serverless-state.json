{
  "service": {
    "service": "OnlineStore",
    "serviceObject": {
      "name": "OnlineStore"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "apiGateway": {
        "apiKeys": [
          "apikey1"
        ]
      },
      "environment": {
        "USERS_TABLE": "OnlineStoreUser",
        "PRODUCTS_TABLE": "OnlineStoreProducts",
        "CATEGORIES_TABLE": "OnlineStoreCategories",
        "TAGS_TABLE": "OnlineStoreTags",
        "ORDER_TABLE": "OnlineStoreOrder",
        "ONLINESTORE_CSV": "onlinestorecsv",
        "JWT_SECRET": "OnlineStoreUser",
        "SECURE_APIKEY": "apikey1",
        "TOKEN": "token"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "s3:PutObject*",
            "s3:GetObject*",
            "s3:ListBucket*",
            "s3:DeleteObject*",
            "ses:*"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreUser",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreProducts",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreCategories",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreTags",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreOrder",
            "arn:aws:s3:::onlinestorecsv/*",
            "arn:aws:dynamodb:us-east-1:*:table/OnlineStoreUser",
            "*"
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AuthoriserAnyTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-authoriserAnyToken"
            }
          },
          "HomeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Home"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Register"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Login"
            }
          },
          "VerifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Verify"
            }
          },
          "AccountDashrecoveryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-account-recovery"
            }
          },
          "ResetPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-ResetPassword"
            }
          },
          "LogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-Logout"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getAllUsers"
            }
          },
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getUsers"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteUser"
            }
          },
          "CsvToDynamodbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-csvToDynamodb"
            }
          },
          "UploadCSVLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-uploadCSV"
            }
          },
          "ListcsvLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-listcsv"
            }
          },
          "DeletecsvLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deletecsv"
            }
          },
          "SearchcsvLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-searchcsv"
            }
          },
          "AddProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addProducts"
            }
          },
          "GetAllProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getAllProducts"
            }
          },
          "GetProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getProducts"
            }
          },
          "GetProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getProduct"
            }
          },
          "UpdateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateProduct"
            }
          },
          "DeleteProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteProduct"
            }
          },
          "SearchProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-searchProduct"
            }
          },
          "AddCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addCategories"
            }
          },
          "AllCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-allCategories"
            }
          },
          "GetCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getCategories"
            }
          },
          "GetCategoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getCategory"
            }
          },
          "UpdateCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateCategories"
            }
          },
          "DeleteCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteCategories"
            }
          },
          "AddTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addTags"
            }
          },
          "AllTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-allTags"
            }
          },
          "GetTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getTags"
            }
          },
          "GetTagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getTag"
            }
          },
          "UpdateTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateTags"
            }
          },
          "DeleteTagLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteTag"
            }
          },
          "AddOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-addOrder"
            }
          },
          "AllOrdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-allOrders"
            }
          },
          "GetOrdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getOrders"
            }
          },
          "GetSingleOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-getSingleOrder"
            }
          },
          "UpdateOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-updateOrder"
            }
          },
          "DeleteOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-deleteOrder"
            }
          },
          "PaymentMethodLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/OnlineStore-dev-paymentMethod"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "OnlineStore",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OnlineStore-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OnlineStore-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "OnlineStore",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AuthoriserAnyTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "authorizers/anyToken.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-authoriserAnyToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthoriserAnyTokenLogGroup"
            ]
          },
          "HomeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Home",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HomeLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "VerifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Verify",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyLogGroup"
            ]
          },
          "AccountDashrecoveryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-account-recovery",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AccountDashrecoveryLogGroup"
            ]
          },
          "ResetPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-ResetPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ResetPasswordLogGroup"
            ]
          },
          "LogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-Logout",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogoutLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/users.getAllUsers",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/users.getUsers",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/users.getUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/users.updateUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Users/users.deleteUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "CsvToDynamodbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/csvtodynamodb.csvtodynamodb",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-csvToDynamodb",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CsvToDynamodbLogGroup"
            ]
          },
          "UploadCSVLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Buckets/uploadcsv.uploadcsv",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-uploadCSV",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadCSVLogGroup"
            ]
          },
          "ListcsvLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Buckets/listcsv.listcsv",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-listcsv",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListcsvLogGroup"
            ]
          },
          "DeletecsvLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Buckets/deletecsv.deletecsv",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deletecsv",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletecsvLogGroup"
            ]
          },
          "SearchcsvLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Buckets/searchcsv.searchcsv",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-searchcsv",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SearchcsvLogGroup"
            ]
          },
          "AddProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.addProducts",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddProductsLogGroup"
            ]
          },
          "GetAllProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.getAllProducts",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getAllProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllProductsLogGroup"
            ]
          },
          "GetProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.getProducts",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsLogGroup"
            ]
          },
          "GetProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.getProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductLogGroup"
            ]
          },
          "UpdateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.updateProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProductLogGroup"
            ]
          },
          "DeleteProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.deleteProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteProductLogGroup"
            ]
          },
          "SearchProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Products/addProducts.searchProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-searchProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SearchProductLogGroup"
            ]
          },
          "AddCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.addCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddCategoriesLogGroup"
            ]
          },
          "AllCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.allCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-allCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AllCategoriesLogGroup"
            ]
          },
          "GetCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.getCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCategoriesLogGroup"
            ]
          },
          "GetCategoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.getCategory",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getCategory",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCategoryLogGroup"
            ]
          },
          "UpdateCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.updateCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCategoriesLogGroup"
            ]
          },
          "DeleteCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Categories/categories.deleteCategories",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteCategories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCategoriesLogGroup"
            ]
          },
          "AddTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.addTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddTagsLogGroup"
            ]
          },
          "AllTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.allTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-allTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AllTagsLogGroup"
            ]
          },
          "GetTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.getTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagsLogGroup"
            ]
          },
          "GetTagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.getTag",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getTag",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagLogGroup"
            ]
          },
          "UpdateTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.updateTags",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTagsLogGroup"
            ]
          },
          "DeleteTagLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Tags/tags.deleteTag",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteTag",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTagLogGroup"
            ]
          },
          "AddOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Order/order.addOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-addOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddOrderLogGroup"
            ]
          },
          "AllOrdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Order/order.allOrders",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-allOrders",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AllOrdersLogGroup"
            ]
          },
          "GetOrdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Order/order.getOrders",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getOrders",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOrdersLogGroup"
            ]
          },
          "GetSingleOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Order/order.getSingleOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-getSingleOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSingleOrderLogGroup"
            ]
          },
          "UpdateOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Order/order.updateOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-updateOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateOrderLogGroup"
            ]
          },
          "DeleteOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "Order/order.deleteOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-deleteOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteOrderLogGroup"
            ]
          },
          "PaymentMethodLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z/OnlineStore.zip"
              },
              "Handler": "paymentMethod/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "OnlineStore-dev-paymentMethod",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "OnlineStoreUser",
                  "PRODUCTS_TABLE": "OnlineStoreProducts",
                  "CATEGORIES_TABLE": "OnlineStoreCategories",
                  "TAGS_TABLE": "OnlineStoreTags",
                  "ORDER_TABLE": "OnlineStoreOrder",
                  "ONLINESTORE_CSV": "onlinestorecsv",
                  "JWT_SECRET": "OnlineStoreUser",
                  "SECURE_APIKEY": "apikey1",
                  "TOKEN": "token"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PaymentMethodLogGroup"
            ]
          },
          "AuthoriserAnyTokenLambdaVersionjFsWtH2ljrkK9zDRg6ZtOxeifrPn3vRjKTHl9GacI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthoriserAnyTokenLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "HomeLambdaVersionGuKWKRJc4ePmTht3inkS8LvF2lgMIh7g9mpmpmfAgz0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HomeLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "RegisterLambdaVersioneGhBQywQs534gokrydIFn8RscS9mxu5viDfu1DziU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "LoginLambdaVersionMFaNSNAnTbo3HHlx4vdFIAvYlxyDOSJE0Gum3tdAQs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "VerifyLambdaVersionxvbOAMmkUoB4vLvbmBj8g5PvK8LOOcXUrensokxJLXE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AccountDashrecoveryLambdaVersion9tL5H9lK31O2vWIGmrQ1L9aLqEm0bA9G2Equnl2K1E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AccountDashrecoveryLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "ResetPasswordLambdaVersionhzgV56LnlGLCggMH4BqemYl6Z7kySUq6MkDX3quKxA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResetPasswordLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "LogoutLambdaVersionSvs5wcmlud9WbbMOak19wxSepdWPQp5oTSQlVHdeN98": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogoutLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetAllUsersLambdaVersionwclEI9PmRmgPrICmJfsLuj24wyMGazK8gfBzYcGzYM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetUsersLambdaVersionh8iPYTEqK9EhB8svMojVcqAnleOvwU5HMp8pDourY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetUserLambdaVersionlb8PH5F1ezMm4F5X1G6M2oeLVhMv8iE9dZIi15KLSfk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "UpdateUserLambdaVersionaDCHDOS6jhMuy6kaOWZJEGa5waEODDUjTkooJ9IYy4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "DeleteUserLambdaVersionobjHp2PD6KWqRrefh1WQdApn45s3i5HYt0XghVqHss": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "CsvToDynamodbLambdaVersiontQpmNgN3DzM96qBj1mTGud2qitWFJXhqhv9aTk3ICg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CsvToDynamodbLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "UploadCSVLambdaVersionHnOkEco7KefsUSvA0pWZAkdAPXgmZ4THruse6tWQ7Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadCSVLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "ListcsvLambdaVersionpsM2sDHT6MENS0PEWcTgTQZYI7J7FfUjouceLDz4g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListcsvLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "DeletecsvLambdaVersion1TXGJtRxAeEAlI88hfi3dZeisCeo9OyROqn2hlleDTA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletecsvLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "SearchcsvLambdaVersionaZBtBqBNIy8SvssfR0x6JmPQsus53lnhiM8cUuHuF0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchcsvLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AddProductsLambdaVersion1f9F4kwVi2fHcZONyKCWWDkbxaj2VO852XB2dP8aiz8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddProductsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetAllProductsLambdaVersioneaWr9rqgqONC3TXwvep61bsc7InVdnAudTycShDEE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllProductsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetProductsLambdaVersiona2te3gL9iC8phccVngVZWb5ZN3EYCj5hi44f0WKM8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetProductLambdaVersionkKfmLzaACq4bJgmY1lgVIu66ZXT0rDCo0o6Rg7ESAM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "UpdateProductLambdaVersioneHLTk5Ao0j9v9tq1uZZZidPGquhgIW808Z2OoFi0k8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProductLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "DeleteProductLambdaVersionVeOZGgmfORgh9WL0CCWW9dZQ4mKbmZr2yeiyEBKCs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProductLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "SearchProductLambdaVersionY6KonipyD3I9N6mwyAmF2RKDBuID2IDmI4NVaqogag": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchProductLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AddCategoriesLambdaVersionvlKJg9lDQBWEyPul6qQTwGul0q2YpYa4xo3kLWoddM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddCategoriesLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AllCategoriesLambdaVersiondyy47FSIo6iY3Kmll9jeK4PmZJBRLFsBPAEmjmRVDTk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllCategoriesLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetCategoriesLambdaVersion5Sc6vcLVZdlrbztTaa8sslVySIvnGUVt1AHtBjPVLlQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCategoriesLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetCategoryLambdaVersiontF014fyayVcGD7wmmpqxmrLR8m34TnJ2NzPwvCzlvI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCategoryLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "UpdateCategoriesLambdaVersionhiFi4Taz4PdYFDpBxiB7seUY80851bvPrrl70ly4ZAA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCategoriesLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "DeleteCategoriesLambdaVersion3955xF4zlYQOwwcQHCjfiQogSDAIJ44S6oiphfIM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCategoriesLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AddTagsLambdaVersione5qwdGUIRlE4YQpPtDm5CaiTjv1GuOCYqHDG0Ipuncw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddTagsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AllTagsLambdaVersionRe7XvyTBEB8bYueU8VaSOd2IGxy8AcWzGwAd7Q0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllTagsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetTagsLambdaVersionCAxh3b90s5wLwqbq6MVbDFIflmUOdB5cNno6c17qU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetTagLambdaVersiontu5eeIBZCL5WvDzPcytAEK5xDUO2uOmOHR1bG9Z0E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "UpdateTagsLambdaVersiontI8fhv75HEe8RKfXD8QJOneLcgJ1fSl6mbAyNP2R3ew": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTagsLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "DeleteTagLambdaVersionqUIjZZ3dZdh7k9jj2z9Y5Tu2rkpEu6BZmTJnbCc4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTagLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AddOrderLambdaVersionntavpvMVdnIi0K5d3IAJZeBpoOq1bNvIbE4PENeU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddOrderLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "AllOrdersLambdaVersion4o4kLZYVb60qbIlRtIZMFZXFCCbYv79mCIrq7pKokQU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AllOrdersLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetOrdersLambdaVersionbZSsvYqSuQe4foPCt5tK7qgm5NHpG0BBkdiHpKvjEc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOrdersLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "GetSingleOrderLambdaVersionad2SAQph4C7ES26jIj2rbIHGudWHURD5x7UQTvg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSingleOrderLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "UpdateOrderLambdaVersionFKVpahH90yZFSSUlVl8fAQtEWhLopIZRJshxPpDXZfE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateOrderLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "DeleteOrderLambdaVersion318CY2CpfzBlVbWbSoY9sectTzL4omzK5zjJMYDk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteOrderLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "PaymentMethodLambdaVersionEEq4VbOeH5AE9LMZ5askRcxK1tRYomfXnIj46cXxA7s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PaymentMethodLambdaFunction"
              },
              "CodeSha256": "zMAKoeG0WJBuWe+W0o0KWz71LYJ6TgDf5FNR2pMr+fQ="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-OnlineStore",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHome": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "home",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceVerify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "verify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccountDashrecovery": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "account-recovery",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResetpassword": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "resetpassword",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogout": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "logout",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetuserEmailVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGetuser"
              },
              "PathPart": "{email}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updateuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deleteuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteuserEmailVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeleteuser"
              },
              "PathPart": "{email}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCsvtodynamodb": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "csvtodynamodb",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUploadcsv": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "uploadcsv",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceListcsv": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "listcsv",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletecsv": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deletecsv",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletecsvFilenameVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeletecsv"
              },
              "PathPart": "{filename}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchcsv": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "searchcsv",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchcsvNameVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSearchcsv"
              },
              "PathPart": "{name}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddproducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addProducts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetallproducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getAllProducts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "products",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "product",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchproduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "searchproduct",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchproductNameVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSearchproduct"
              },
              "PathPart": "{name}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddcategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addCategories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllcategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allCategories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "categories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategoriesNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCategories"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "category",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCategoryIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCategory"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdatecategories": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updatecategories",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletecategory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deletecategory",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletecategoryIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeletecategory"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddtags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addTags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlltags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allTags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTagsNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTags"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTag": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tag",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTagIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTag"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdatetags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updatetags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletetag": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deletetag",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletetagIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeletetag"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addOrder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllorders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allorders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "orders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetsingleorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getSingleOrder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetsingleorderIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGetsingleorder"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updateorder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deleteorder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteorderIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDeleteorder"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePaymentmethod": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "paymentMethod",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHomeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHome"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HomeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HomeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodVerifyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "VerifyLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAccountDashrecoveryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountDashrecovery"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AccountDashrecoveryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AccountDashrecoveryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResetpasswordPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResetpassword"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResetPasswordLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ResetPasswordLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLogoutPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogout"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LogoutLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LogoutLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetuserEmailVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetuserEmailVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateuserPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteuserEmailVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteuserEmailVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodCsvtodynamodbPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCsvtodynamodb"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CsvToDynamodbLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodUploadcsvPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadcsv"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadCSVLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodListcsvGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceListcsv"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListcsvLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListcsvLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeletecsvFilenameVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletecsvFilenameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletecsvLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodSearchcsvNameVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSearchcsvNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SearchcsvLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SearchcsvLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddproductsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddproducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetallproductsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetallproducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProduct"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSearchproductNameVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSearchproductNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SearchProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SearchProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddcategoriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddcategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAllcategoriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllcategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AllCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AllCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCategoriesNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCategoriesNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetCategoriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCategoryIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCategoryIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCategoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetCategoryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdatecategoriesPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdatecategories"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodDeletecategoryIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletecategoryIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteCategoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAddtagsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddtags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAlltagsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlltags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AllTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AllTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTagsNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagsNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTagIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTagIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTagLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdatetagsPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdatetags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodDeletetagIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletetagIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteTagLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAddorderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddorder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAllordersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllorders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AllOrdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AllOrdersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrdersNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrdersNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOrdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOrdersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetsingleorderIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetsingleorderIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSingleOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSingleOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateorderPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateorder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteorderIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteorderIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthoriserAnyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthoriserAnyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodPaymentmethodPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePaymentmethod"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PaymentMethodLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PaymentMethodLambdaPermissionApiGateway"
            ]
          },
          "AuthoriserAnyTokenApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.token",
              "Name": "authoriserAnyToken",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthoriserAnyTokenLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "REQUEST"
            }
          },
          "ApiGatewayDeployment1670504702254": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHomeGet",
              "ApiGatewayMethodRegisterPost",
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodVerifyPost",
              "ApiGatewayMethodAccountDashrecoveryPost",
              "ApiGatewayMethodResetpasswordPut",
              "ApiGatewayMethodLogoutPost",
              "ApiGatewayMethodUsersGet",
              "ApiGatewayMethodUsersNumberVarGet",
              "ApiGatewayMethodGetuserEmailVarGet",
              "ApiGatewayMethodUpdateuserPut",
              "ApiGatewayMethodDeleteuserEmailVarDelete",
              "ApiGatewayMethodCsvtodynamodbPost",
              "ApiGatewayMethodUploadcsvPost",
              "ApiGatewayMethodListcsvGet",
              "ApiGatewayMethodDeletecsvFilenameVarDelete",
              "ApiGatewayMethodSearchcsvNameVarGet",
              "ApiGatewayMethodAddproductsPost",
              "ApiGatewayMethodGetallproductsGet",
              "ApiGatewayMethodProductsNumberVarGet",
              "ApiGatewayMethodProductIdVarGet",
              "ApiGatewayMethodProductPut",
              "ApiGatewayMethodProductIdVarDelete",
              "ApiGatewayMethodSearchproductNameVarGet",
              "ApiGatewayMethodAddcategoriesPost",
              "ApiGatewayMethodAllcategoriesGet",
              "ApiGatewayMethodCategoriesNumberVarGet",
              "ApiGatewayMethodCategoryIdVarGet",
              "ApiGatewayMethodUpdatecategoriesPut",
              "ApiGatewayMethodDeletecategoryIdVarDelete",
              "ApiGatewayMethodAddtagsPost",
              "ApiGatewayMethodAlltagsGet",
              "ApiGatewayMethodTagsNumberVarGet",
              "ApiGatewayMethodTagIdVarGet",
              "ApiGatewayMethodUpdatetagsPut",
              "ApiGatewayMethodDeletetagIdVarDelete",
              "ApiGatewayMethodAddorderPost",
              "ApiGatewayMethodAllordersGet",
              "ApiGatewayMethodOrdersNumberVarGet",
              "ApiGatewayMethodGetsingleorderIdVarGet",
              "ApiGatewayMethodUpdateorderPut",
              "ApiGatewayMethodDeleteorderIdVarDelete",
              "ApiGatewayMethodPaymentmethodPost"
            ]
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "Name": "apikey1",
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "dev"
                }
              ]
            },
            "DependsOn": "ApiGatewayDeployment1670504702254"
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1670504702254",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "dev"
                }
              ],
              "Description": "Usage plan for OnlineStore dev stage",
              "UsagePlanName": "OnlineStore-dev"
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "HomeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AccountDashrecoveryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AccountDashrecoveryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ResetPasswordLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResetPasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LogoutLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthoriserAnyTokenLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthoriserAnyTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CsvToDynamodbLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CsvToDynamodbLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UploadCSVLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadCSVLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListcsvLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListcsvLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletecsvLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletecsvLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SearchcsvLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchcsvLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SearchProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AllCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AllCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCategoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCategoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteCategoriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AllTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AllTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteTagLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTagLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AllOrdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AllOrdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOrdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOrdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSingleOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSingleOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PaymentMethodLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PaymentMethodLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "OnlineStoreCSV": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "onlinestorecsv"
            }
          },
          "ProductsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreProducts"
            }
          },
          "CategoriesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreCategories"
            }
          },
          "TagsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreTags"
            }
          },
          "OrderTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreOrder"
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OnlineStoreUser"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ServerlessDeploymentBucketName"
            }
          },
          "AuthoriserAnyTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthoriserAnyTokenLambdaVersionjFsWtH2ljrkK9zDRg6ZtOxeifrPn3vRjKTHl9GacI"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AuthoriserAnyTokenLambdaFunctionQualifiedArn"
            }
          },
          "HomeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HomeLambdaVersionGuKWKRJc4ePmTht3inkS8LvF2lgMIh7g9mpmpmfAgz0"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-HomeLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersioneGhBQywQs534gokrydIFn8RscS9mxu5viDfu1DziU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionMFaNSNAnTbo3HHlx4vdFIAvYlxyDOSJE0Gum3tdAQs"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "VerifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyLambdaVersionxvbOAMmkUoB4vLvbmBj8g5PvK8LOOcXUrensokxJLXE"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-VerifyLambdaFunctionQualifiedArn"
            }
          },
          "AccountDashrecoveryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AccountDashrecoveryLambdaVersion9tL5H9lK31O2vWIGmrQ1L9aLqEm0bA9G2Equnl2K1E"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AccountDashrecoveryLambdaFunctionQualifiedArn"
            }
          },
          "ResetPasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResetPasswordLambdaVersionhzgV56LnlGLCggMH4BqemYl6Z7kySUq6MkDX3quKxA"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ResetPasswordLambdaFunctionQualifiedArn"
            }
          },
          "LogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogoutLambdaVersionSvs5wcmlud9WbbMOak19wxSepdWPQp5oTSQlVHdeN98"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-LogoutLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionwclEI9PmRmgPrICmJfsLuj24wyMGazK8gfBzYcGzYM"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionh8iPYTEqK9EhB8svMojVcqAnleOvwU5HMp8pDourY"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionlb8PH5F1ezMm4F5X1G6M2oeLVhMv8iE9dZIi15KLSfk"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionaDCHDOS6jhMuy6kaOWZJEGa5waEODDUjTkooJ9IYy4"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionobjHp2PD6KWqRrefh1WQdApn45s3i5HYt0XghVqHss"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "CsvToDynamodbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CsvToDynamodbLambdaVersiontQpmNgN3DzM96qBj1mTGud2qitWFJXhqhv9aTk3ICg"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-CsvToDynamodbLambdaFunctionQualifiedArn"
            }
          },
          "UploadCSVLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadCSVLambdaVersionHnOkEco7KefsUSvA0pWZAkdAPXgmZ4THruse6tWQ7Q"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UploadCSVLambdaFunctionQualifiedArn"
            }
          },
          "ListcsvLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListcsvLambdaVersionpsM2sDHT6MENS0PEWcTgTQZYI7J7FfUjouceLDz4g"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ListcsvLambdaFunctionQualifiedArn"
            }
          },
          "DeletecsvLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletecsvLambdaVersion1TXGJtRxAeEAlI88hfi3dZeisCeo9OyROqn2hlleDTA"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeletecsvLambdaFunctionQualifiedArn"
            }
          },
          "SearchcsvLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchcsvLambdaVersionaZBtBqBNIy8SvssfR0x6JmPQsus53lnhiM8cUuHuF0"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-SearchcsvLambdaFunctionQualifiedArn"
            }
          },
          "AddProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddProductsLambdaVersion1f9F4kwVi2fHcZONyKCWWDkbxaj2VO852XB2dP8aiz8"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetAllProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllProductsLambdaVersioneaWr9rqgqONC3TXwvep61bsc7InVdnAudTycShDEE"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetAllProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsLambdaVersiona2te3gL9iC8phccVngVZWb5ZN3EYCj5hi44f0WKM8"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductLambdaVersionkKfmLzaACq4bJgmY1lgVIu66ZXT0rDCo0o6Rg7ESAM"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetProductLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProductLambdaVersioneHLTk5Ao0j9v9tq1uZZZidPGquhgIW808Z2OoFi0k8"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateProductLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProductLambdaVersionVeOZGgmfORgh9WL0CCWW9dZQ4mKbmZr2yeiyEBKCs"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteProductLambdaFunctionQualifiedArn"
            }
          },
          "SearchProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchProductLambdaVersionY6KonipyD3I9N6mwyAmF2RKDBuID2IDmI4NVaqogag"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-SearchProductLambdaFunctionQualifiedArn"
            }
          },
          "AddCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddCategoriesLambdaVersionvlKJg9lDQBWEyPul6qQTwGul0q2YpYa4xo3kLWoddM"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "AllCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllCategoriesLambdaVersiondyy47FSIo6iY3Kmll9jeK4PmZJBRLFsBPAEmjmRVDTk"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AllCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "GetCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCategoriesLambdaVersion5Sc6vcLVZdlrbztTaa8sslVySIvnGUVt1AHtBjPVLlQ"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "GetCategoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCategoryLambdaVersiontF014fyayVcGD7wmmpqxmrLR8m34TnJ2NzPwvCzlvI"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetCategoryLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCategoriesLambdaVersionhiFi4Taz4PdYFDpBxiB7seUY80851bvPrrl70ly4ZAA"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCategoriesLambdaVersion3955xF4zlYQOwwcQHCjfiQogSDAIJ44S6oiphfIM"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "AddTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddTagsLambdaVersione5qwdGUIRlE4YQpPtDm5CaiTjv1GuOCYqHDG0Ipuncw"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddTagsLambdaFunctionQualifiedArn"
            }
          },
          "AllTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllTagsLambdaVersionRe7XvyTBEB8bYueU8VaSOd2IGxy8AcWzGwAd7Q0"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AllTagsLambdaFunctionQualifiedArn"
            }
          },
          "GetTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagsLambdaVersionCAxh3b90s5wLwqbq6MVbDFIflmUOdB5cNno6c17qU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetTagsLambdaFunctionQualifiedArn"
            }
          },
          "GetTagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagLambdaVersiontu5eeIBZCL5WvDzPcytAEK5xDUO2uOmOHR1bG9Z0E"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetTagLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTagsLambdaVersiontI8fhv75HEe8RKfXD8QJOneLcgJ1fSl6mbAyNP2R3ew"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateTagsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTagLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTagLambdaVersionqUIjZZ3dZdh7k9jj2z9Y5Tu2rkpEu6BZmTJnbCc4"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteTagLambdaFunctionQualifiedArn"
            }
          },
          "AddOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddOrderLambdaVersionntavpvMVdnIi0K5d3IAJZeBpoOq1bNvIbE4PENeU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AddOrderLambdaFunctionQualifiedArn"
            }
          },
          "AllOrdersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AllOrdersLambdaVersion4o4kLZYVb60qbIlRtIZMFZXFCCbYv79mCIrq7pKokQU"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-AllOrdersLambdaFunctionQualifiedArn"
            }
          },
          "GetOrdersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOrdersLambdaVersionbZSsvYqSuQe4foPCt5tK7qgm5NHpG0BBkdiHpKvjEc"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetOrdersLambdaFunctionQualifiedArn"
            }
          },
          "GetSingleOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSingleOrderLambdaVersionad2SAQph4C7ES26jIj2rbIHGudWHURD5x7UQTvg"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-GetSingleOrderLambdaFunctionQualifiedArn"
            }
          },
          "UpdateOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateOrderLambdaVersionFKVpahH90yZFSSUlVl8fAQtEWhLopIZRJshxPpDXZfE"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-UpdateOrderLambdaFunctionQualifiedArn"
            }
          },
          "DeleteOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteOrderLambdaVersion318CY2CpfzBlVbWbSoY9sectTzL4omzK5zjJMYDk"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-DeleteOrderLambdaFunctionQualifiedArn"
            }
          },
          "PaymentMethodLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PaymentMethodLambdaVersionEEq4VbOeH5AE9LMZ5askRcxK1tRYomfXnIj46cXxA7s"
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-PaymentMethodLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-OnlineStore-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "settings": {
        "USERS_TABLE": "OnlineStoreUser",
        "PRODUCTS_TABLE": "OnlineStoreProducts",
        "CATEGORIES_TABLE": "OnlineStoreCategories",
        "TAGS_TABLE": "OnlineStoreTags",
        "ORDER_TABLE": "OnlineStoreOrder",
        "ONLINESTORE_CSV": "onlinestorecsv",
        "JWT_SECRET": "OnlineStoreUser",
        "SECURE_APIKEY": "apikey1",
        "TOKEN": "token"
      }
    },
    "pluginsData": {},
    "functions": {
      "authoriserAnyToken": {
        "handler": "authorizers/anyToken.handler",
        "events": [],
        "name": "OnlineStore-dev-authoriserAnyToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AuthoriserAnyTokenLambdaVersionjFsWtH2ljrkK9zDRg6ZtOxeifrPn3vRjKTHl9GacI"
      },
      "Home": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "home",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Home",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "HomeLambdaVersionGuKWKRJc4ePmTht3inkS8LvF2lgMIh7g9mpmpmfAgz0"
      },
      "Register": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "register",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Register",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RegisterLambdaVersioneGhBQywQs534gokrydIFn8RscS9mxu5viDfu1DziU"
      },
      "Login": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionMFaNSNAnTbo3HHlx4vdFIAvYlxyDOSJE0Gum3tdAQs"
      },
      "Verify": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "verify",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Verify",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "VerifyLambdaVersionxvbOAMmkUoB4vLvbmBj8g5PvK8LOOcXUrensokxJLXE"
      },
      "account-recovery": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "account-recovery",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-account-recovery",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AccountDashrecoveryLambdaVersion9tL5H9lK31O2vWIGmrQ1L9aLqEm0bA9G2Equnl2K1E"
      },
      "ResetPassword": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "resetpassword",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-ResetPassword",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ResetPasswordLambdaVersionhzgV56LnlGLCggMH4BqemYl6Z7kySUq6MkDX3quKxA"
      },
      "Logout": {
        "handler": "Users/index.handler",
        "events": [
          {
            "http": {
              "path": "logout",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-Logout",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LogoutLambdaVersionSvs5wcmlud9WbbMOak19wxSepdWPQp5oTSQlVHdeN98"
      },
      "getAllUsers": {
        "handler": "Users/users.getAllUsers",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getAllUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionwclEI9PmRmgPrICmJfsLuj24wyMGazK8gfBzYcGzYM"
      },
      "getUsers": {
        "handler": "Users/users.getUsers",
        "events": [
          {
            "http": {
              "path": "users/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionh8iPYTEqK9EhB8svMojVcqAnleOvwU5HMp8pDourY"
      },
      "getUser": {
        "handler": "Users/users.getUser",
        "events": [
          {
            "http": {
              "path": "getuser/{email}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionlb8PH5F1ezMm4F5X1G6M2oeLVhMv8iE9dZIi15KLSfk"
      },
      "updateUser": {
        "handler": "Users/users.updateUser",
        "events": [
          {
            "http": {
              "path": "updateuser",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionaDCHDOS6jhMuy6kaOWZJEGa5waEODDUjTkooJ9IYy4"
      },
      "deleteUser": {
        "handler": "Users/users.deleteUser",
        "events": [
          {
            "http": {
              "path": "deleteuser/{email}",
              "method": "delete",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionobjHp2PD6KWqRrefh1WQdApn45s3i5HYt0XghVqHss"
      },
      "csvToDynamodb": {
        "handler": "Products/csvtodynamodb.csvtodynamodb",
        "events": [
          {
            "http": {
              "path": "csvtodynamodb",
              "method": "post",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-csvToDynamodb",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CsvToDynamodbLambdaVersiontQpmNgN3DzM96qBj1mTGud2qitWFJXhqhv9aTk3ICg"
      },
      "uploadCSV": {
        "handler": "Buckets/uploadcsv.uploadcsv",
        "events": [
          {
            "http": {
              "path": "uploadcsv",
              "method": "post",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-uploadCSV",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UploadCSVLambdaVersionHnOkEco7KefsUSvA0pWZAkdAPXgmZ4THruse6tWQ7Q"
      },
      "listcsv": {
        "handler": "Buckets/listcsv.listcsv",
        "events": [
          {
            "http": {
              "path": "listcsv",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-listcsv",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListcsvLambdaVersionpsM2sDHT6MENS0PEWcTgTQZYI7J7FfUjouceLDz4g"
      },
      "deletecsv": {
        "handler": "Buckets/deletecsv.deletecsv",
        "events": [
          {
            "http": {
              "path": "deletecsv/{filename}",
              "method": "delete",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deletecsv",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeletecsvLambdaVersion1TXGJtRxAeEAlI88hfi3dZeisCeo9OyROqn2hlleDTA"
      },
      "searchcsv": {
        "handler": "Buckets/searchcsv.searchcsv",
        "events": [
          {
            "http": {
              "path": "searchcsv/{name}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-searchcsv",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SearchcsvLambdaVersionaZBtBqBNIy8SvssfR0x6JmPQsus53lnhiM8cUuHuF0"
      },
      "addProducts": {
        "handler": "Products/addProducts.addProducts",
        "events": [
          {
            "http": {
              "path": "addProducts",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddProductsLambdaVersion1f9F4kwVi2fHcZONyKCWWDkbxaj2VO852XB2dP8aiz8"
      },
      "getAllProducts": {
        "handler": "Products/addProducts.getAllProducts",
        "events": [
          {
            "http": {
              "path": "getAllProducts",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getAllProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllProductsLambdaVersioneaWr9rqgqONC3TXwvep61bsc7InVdnAudTycShDEE"
      },
      "getProducts": {
        "handler": "Products/addProducts.getProducts",
        "events": [
          {
            "http": {
              "path": "products/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetProductsLambdaVersiona2te3gL9iC8phccVngVZWb5ZN3EYCj5hi44f0WKM8"
      },
      "getProduct": {
        "handler": "Products/addProducts.getProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetProductLambdaVersionkKfmLzaACq4bJgmY1lgVIu66ZXT0rDCo0o6Rg7ESAM"
      },
      "updateProduct": {
        "handler": "Products/addProducts.updateProduct",
        "events": [
          {
            "http": {
              "path": "product",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateProductLambdaVersioneHLTk5Ao0j9v9tq1uZZZidPGquhgIW808Z2OoFi0k8"
      },
      "deleteProduct": {
        "handler": "Products/addProducts.deleteProduct",
        "events": [
          {
            "http": {
              "path": "product/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteProductLambdaVersionVeOZGgmfORgh9WL0CCWW9dZQ4mKbmZr2yeiyEBKCs"
      },
      "searchProduct": {
        "handler": "Products/addProducts.searchProduct",
        "events": [
          {
            "http": {
              "path": "searchproduct/{name}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-searchProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SearchProductLambdaVersionY6KonipyD3I9N6mwyAmF2RKDBuID2IDmI4NVaqogag"
      },
      "addCategories": {
        "handler": "Categories/categories.addCategories",
        "events": [
          {
            "http": {
              "path": "addCategories",
              "method": "post",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddCategoriesLambdaVersionvlKJg9lDQBWEyPul6qQTwGul0q2YpYa4xo3kLWoddM"
      },
      "allCategories": {
        "handler": "Categories/categories.allCategories",
        "events": [
          {
            "http": {
              "path": "allCategories",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-allCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AllCategoriesLambdaVersiondyy47FSIo6iY3Kmll9jeK4PmZJBRLFsBPAEmjmRVDTk"
      },
      "getCategories": {
        "handler": "Categories/categories.getCategories",
        "events": [
          {
            "http": {
              "path": "categories/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCategoriesLambdaVersion5Sc6vcLVZdlrbztTaa8sslVySIvnGUVt1AHtBjPVLlQ"
      },
      "getCategory": {
        "handler": "Categories/categories.getCategory",
        "events": [
          {
            "http": {
              "path": "category/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getCategory",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCategoryLambdaVersiontF014fyayVcGD7wmmpqxmrLR8m34TnJ2NzPwvCzlvI"
      },
      "updateCategories": {
        "handler": "Categories/categories.updateCategories",
        "events": [
          {
            "http": {
              "path": "updatecategories",
              "method": "put",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateCategoriesLambdaVersionhiFi4Taz4PdYFDpBxiB7seUY80851bvPrrl70ly4ZAA"
      },
      "deleteCategories": {
        "handler": "Categories/categories.deleteCategories",
        "events": [
          {
            "http": {
              "path": "deletecategory/{id}",
              "method": "delete",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteCategories",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteCategoriesLambdaVersion3955xF4zlYQOwwcQHCjfiQogSDAIJ44S6oiphfIM"
      },
      "addTags": {
        "handler": "Tags/tags.addTags",
        "events": [
          {
            "http": {
              "path": "addTags",
              "method": "post",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddTagsLambdaVersione5qwdGUIRlE4YQpPtDm5CaiTjv1GuOCYqHDG0Ipuncw"
      },
      "allTags": {
        "handler": "Tags/tags.allTags",
        "events": [
          {
            "http": {
              "path": "allTags",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-allTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AllTagsLambdaVersionRe7XvyTBEB8bYueU8VaSOd2IGxy8AcWzGwAd7Q0"
      },
      "getTags": {
        "handler": "Tags/tags.getTags",
        "events": [
          {
            "http": {
              "path": "tags/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTagsLambdaVersionCAxh3b90s5wLwqbq6MVbDFIflmUOdB5cNno6c17qU"
      },
      "getTag": {
        "handler": "Tags/tags.getTag",
        "events": [
          {
            "http": {
              "path": "tag/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getTag",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTagLambdaVersiontu5eeIBZCL5WvDzPcytAEK5xDUO2uOmOHR1bG9Z0E"
      },
      "updateTags": {
        "handler": "Tags/tags.updateTags",
        "events": [
          {
            "http": {
              "path": "updatetags",
              "method": "put",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateTags",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateTagsLambdaVersiontI8fhv75HEe8RKfXD8QJOneLcgJ1fSl6mbAyNP2R3ew"
      },
      "deleteTag": {
        "handler": "Tags/tags.deleteTag",
        "events": [
          {
            "http": {
              "path": "deletetag/{id}",
              "method": "delete",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteTag",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteTagLambdaVersionqUIjZZ3dZdh7k9jj2z9Y5Tu2rkpEu6BZmTJnbCc4"
      },
      "addOrder": {
        "handler": "Order/order.addOrder",
        "events": [
          {
            "http": {
              "path": "addOrder",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-addOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddOrderLambdaVersionntavpvMVdnIi0K5d3IAJZeBpoOq1bNvIbE4PENeU"
      },
      "allOrders": {
        "handler": "Order/order.allOrders",
        "events": [
          {
            "http": {
              "path": "allorders",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-allOrders",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AllOrdersLambdaVersion4o4kLZYVb60qbIlRtIZMFZXFCCbYv79mCIrq7pKokQU"
      },
      "getOrders": {
        "handler": "Order/order.getOrders",
        "events": [
          {
            "http": {
              "path": "orders/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getOrders",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetOrdersLambdaVersionbZSsvYqSuQe4foPCt5tK7qgm5NHpG0BBkdiHpKvjEc"
      },
      "getSingleOrder": {
        "handler": "Order/order.getSingleOrder",
        "events": [
          {
            "http": {
              "path": "getSingleOrder/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-getSingleOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetSingleOrderLambdaVersionad2SAQph4C7ES26jIj2rbIHGudWHURD5x7UQTvg"
      },
      "updateOrder": {
        "handler": "Order/order.updateOrder",
        "events": [
          {
            "http": {
              "path": "updateorder",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-updateOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateOrderLambdaVersionFKVpahH90yZFSSUlVl8fAQtEWhLopIZRJshxPpDXZfE"
      },
      "deleteOrder": {
        "handler": "Order/order.deleteOrder",
        "events": [
          {
            "http": {
              "path": "deleteorder/{id}",
              "method": "delete",
              "authorizer": {
                "type": "request",
                "name": "authoriserAnyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthoriserAnyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.token",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-deleteOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteOrderLambdaVersion318CY2CpfzBlVbWbSoY9sectTzL4omzK5zjJMYDk"
      },
      "paymentMethod": {
        "handler": "paymentMethod/index.handler",
        "events": [
          {
            "http": {
              "path": "paymentMethod",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "OnlineStore-dev-paymentMethod",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PaymentMethodLambdaVersionEEq4VbOeH5AE9LMZ5askRcxK1tRYomfXnIj46cXxA7s"
      }
    },
    "resources": {
      "Resources": {
        "OnlineStoreCSV": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "onlinestorecsv"
          }
        },
        "ProductsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreProducts"
          }
        },
        "CategoriesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreCategories"
          }
        },
        "TagsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreTags"
          }
        },
        "OrderTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreOrder"
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OnlineStoreUser"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "OnlineStore",
      "frameworkVersion": "3",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Riaz Ahmad\\Desktop\\OnlineStore\\.serverless\\OnlineStore.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/OnlineStore/dev/1670504830026-2022-12-08T13:07:10.026Z",
    "artifact": "OnlineStore.zip"
  }
}