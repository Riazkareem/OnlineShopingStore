# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: OnlineStore
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

custom:
  settings:
    USERS_TABLE: OnlineStoreUser
    PRODUCTS_TABLE: OnlineStoreProducts
    CATEGORIES_TABLE: OnlineStoreCategories
    TAGS_TABLE: OnlineStoreTags
    ORDER_TABLE: OnlineStoreOrder
    IMAGES_BUCKET: onlinestoreimages
    ONLINESTORE_CSV: onlinestorecsv
    JWT_SECRET: OnlineStoreUser
    SECURE_APIKEY: apikey1

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  apiGateway:
    apiKeys:
      - ${self:custom.settings.SECURE_APIKEY}
  environment: ${self:custom.settings}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - "s3:PutObject*"
        - "s3:GetObject*"
        - "s3:ListBucket*"
        - "s3:DeleteObject*"
        - "ses:*"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.USERS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.PRODUCTS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.CATEGORIES_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.TAGS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.ORDER_TABLE}"
        - "arn:aws:s3:::${self:custom.settings.IMAGES_BUCKET}/*"
        - "arn:aws:s3:::${self:custom.settings.ONLINESTORE_CSV}/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.JWT_SECRET}"
        - "*"

functions:
  # User Registration Start
  Home:
    handler: Users/index.handler
    events:
      - http:
          path: /home
          method: get
  Register:
    handler: Users/index.handler
    events:
      - http:
          path: /register
          method: post
  Login:
    handler: Users/index.handler
    events:
      - http:
          path: /login
          method: post
  Verify:
    handler: Users/index.handler
    events:
      - http:
          path: /verify
          method: post
  account-recovery:
    handler: Users/index.handler
    events:
      - http:
          path: /account-recovery
          method: post
  ResetPassword:
    handler: Users/index.handler
    events:
      - http:
          path: /resetpassword
          method: put
  Logout:
    handler: Users/index.handler
    events:
      - http:
          path: /logout
          method: post
  # User Registeration end
  getAllUsers:
    handler: Users/users.getAllUsers
    events:
      - http:
          path: /users
          method: get
  getUsers:
    handler: Users/users.getUsers
    events:
      - http:
          path: /users/{number}
          method: get
  getUser:
    handler: Users/users.getUser
    events:
      - http:
          path: /getuser/{email}
          method: get
  updateUser:
    handler: Users/users.updateUser
    events:
      - http:
          path: /updateuser
          method: put
  deleteUser:
    handler: Users/users.deleteUser
    events:
      - http:
          path: /deleteuser/{email}
          method: delete
  # csv to dynamodb and upload csv to s3 bucket
  s3FileUploader:
    handler: Products/products.uploadfile
    events:
      - http:
          path: file
          method: POST
  csvUploader:
    handler: Products/uploadcsv.uploadcsv
    events:
      - http:
          path: uploadcsv
          method: POST
  csvToDynamodb:
    handler: Products/csvtodynamodb.csvtodynamodb
    events:
      - http:
          path: csvtodynamodb
          method: POST
  # CSV Buckets
  uploadCSV:
    handler: Buckets/uploadcsv.uploadcsv
    events:
      - http:
          path: uploadcsv
          method: POST
  listcsv:
    handler: Buckets/listcsv.listcsv
    events:
      - http:
          path: listcsv
          method: GET
  deletecsv:
    handler: Buckets/deletecsv.deletecsv
    events:
      - http:
          path: deletecsv/{filename}
          method: DELETE
  searchcsv:
    handler: Buckets/searchcsv.searchcsv
    events:
      - http:
          path: /searchcsv/{name}
          method: GET
    # products
  addProducts:
    handler: Products/addProducts.addProducts
    events:
      - http:
          path: addProducts
          method: POST
  getAllProducts:
    handler: Products/addProducts.getAllProducts
    events:
      - http:
          path: /getAllProducts
          method: get
  getProducts:
    handler: Products/addProducts.getProducts
    events:
      - http:
          path: /products/{number}
          method: get
  getProduct:
    handler: Products/addProducts.getProduct
    events:
      - http:
          path: /product/{id}
          method: get
  updateProduct:
    handler: Products/addProducts.updateProduct
    events:
      - http:
          path: /product/
          method: put
  deleteProduct:
    handler: Products/addProducts.deleteProduct
    events:
      - http:
          path: /product/{id}
          method: delete
  searchProduct:
    handler: Products/addProducts.searchProduct
    events:
      - http:
          path: /searchproduct/{name}
          method: get
          # private: true
    # categories
  addCategories:
    handler: Categories/categories.addCategories
    events:
      - http:
          path: /addCategories
          method: POST
  allCategories:
    handler: Categories/categories.allCategories
    events:
      - http:
          path: /allCategories
          method: get
  getCategories:
    handler: Categories/categories.getCategories
    events:
      - http:
          path: /categories/{number}
          method: get
  getCategory:
    handler: Categories/categories.getCategory
    events:
      - http:
          path: /category/{id}
          method: get
  updateCategories:
    handler: Categories/categories.updateCategories
    events:
      - http:
          path: /updatecategories
          method: put
  deleteCategories:
    handler: Categories/categories.deleteCategories
    events:
      - http:
          path: /deletecategory/{id}
          method: delete
    # Tags
  addTags:
    handler: Tags/tags.addTags
    events:
      - http:
          path: /addTags
          method: POST
  allTags:
    handler: Tags/tags.allTags
    events:
      - http:
          path: /allTags
          method: get
  getTags:
    handler: Tags/tags.getTags
    events:
      - http:
          path: /tags/{number}
          method: get
  getTag:
    handler: Tags/tags.getTag
    events:
      - http:
          path: /tag/{id}
          method: get
  updateTags:
    handler: Tags/tags.updateTags
    events:
      - http:
          path: /updatetags
          method: put
  deleteTag:
    handler: Tags/tags.deleteTag
    events:
      - http:
          path: /deletetag/{id}
          method: delete
    # Order
  addOrder:
    handler: Order/order.addOrder
    events:
      - http:
          path: /addOrder
          method: POST
  allOrders:
    handler: Order/order.allOrders
    events:
      - http:
          path: /allorders
          method: get
  getOrders:
    handler: Order/order.getOrders
    events:
      - http:
          path: /orders/{number}
          method: get
  getSingleOrder:
    handler: Order/order.getSingleOrder
    events:
      - http:
          path: /getSingleOrder/{id}
          method: get
  updateOrder:
    handler: Order/order.updateOrder
    events:
      - http:
          path: /updateorder
          method: put
  deleteOrder:
    handler: Order/order.deleteOrder
    events:
      - http:
          path: /deleteorder/{id}
          method: delete
    # Payment Method Api
  paymentMethod:
    handler: paymentMethod/index.handler
    events:
      - http:
          path: /paymentMethod
          method: post

resources:
  Resources:
    # onlinestore bucket
    OnlineStoreImages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.settings.IMAGES_BUCKET}
    # CSV bucket
    OnlineStoreCSV:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.settings.ONLINESTORE_CSV}
    # Product Table
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.PRODUCTS_TABLE}
    # Categories Table
    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.CATEGORIES_TABLE}
    # Tags Table
    TagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.TAGS_TABLE}
    # Order Table
    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.ORDER_TABLE}
    # User Registration Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.USERS_TABLE}
